{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport var hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\r\n   * Start of a hard break (escape).\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *      ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape');\n    effects.consume(code);\n    return after;\n  }\n\n  /**\r\n   * After `\\`, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *       ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","map":{"version":3,"names":["markdownLineEnding","hardBreakEscape","name","tokenize","tokenizeHardBreakEscape","effects","ok","nok","start","code","enter","consume","after","exit"],"sources":["C:/Users/mayan/source/repos/mayankcse.github.io/node_modules/micromark-core-commonmark/lib/hard-break-escape.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const hardBreakEscape = {\r\n  name: 'hardBreakEscape',\r\n  tokenize: tokenizeHardBreakEscape\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Start of a hard break (escape).\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *      ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('hardBreakEscape')\r\n    effects.consume(code)\r\n    return after\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | a\\\r\n   *       ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   *  @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.exit('hardBreakEscape')\r\n      return ok(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,kBAAkB,QAAO,0BAA0B;AAC3D;AACA,OAAO,IAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASA,uBAAuBA,CAACC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACjD,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBJ,OAAO,CAACK,KAAK,CAAC,iBAAiB,CAAC;IAChCL,OAAO,CAACM,OAAO,CAACF,IAAI,CAAC;IACrB,OAAOG,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACH,IAAI,EAAE;IACnB,IAAIT,kBAAkB,CAACS,IAAI,CAAC,EAAE;MAC5BJ,OAAO,CAACQ,IAAI,CAAC,iBAAiB,CAAC;MAC/B,OAAOP,EAAE,CAACG,IAAI,CAAC;IACjB;IACA,OAAOF,GAAG,CAACE,IAAI,CAAC;EAClB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}