{"ast":null,"code":"/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\r\n * non-characters and control characters safe.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n *   Character.\r\n */\nexport function decodeNumericCharacterReference(value, base) {\n  var code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 ||\n  // Noncharacters.\n  code > 64975 && code < 65008 /* eslint-disable no-bitwise */ || (code & 65535) === 65535 || (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n  // Out of range\n  code > 1114111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCharCode(code);\n}","map":{"version":3,"names":["decodeNumericCharacterReference","value","base","code","Number","parseInt","String","fromCharCode"],"sources":["C:/mayankcse.github.io/node_modules/micromark-util-decode-numeric-character-reference/index.js"],"sourcesContent":["/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\r\n * non-characters and control characters safe.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n *   Character.\r\n */\r\nexport function decodeNumericCharacterReference(value, base) {\r\n  const code = Number.parseInt(value, base)\r\n  if (\r\n    // C0 except for HT, LF, FF, CR, space.\r\n    code < 9 ||\r\n    code === 11 ||\r\n    (code > 13 && code < 32) ||\r\n    // Control character (DEL) of C0, and C1 controls.\r\n    (code > 126 && code < 160) ||\r\n    // Lone high surrogates and low surrogates.\r\n    (code > 55295 && code < 57344) ||\r\n    // Noncharacters.\r\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\r\n    (code & 65535) === 65535 ||\r\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\r\n    // Out of range\r\n    code > 1114111\r\n  ) {\r\n    return '\\uFFFD'\r\n  }\r\n  return String.fromCharCode(code)\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,+BAA+BA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC3D,IAAMC,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACJ,KAAK,EAAEC,IAAI,CAAC;EACzC;EACE;EACAC,IAAI,GAAG,CAAC,IACRA,IAAI,KAAK,EAAE,IACVA,IAAI,GAAG,EAAE,IAAIA,IAAI,GAAG,EAAG;EACxB;EACCA,IAAI,GAAG,GAAG,IAAIA,IAAI,GAAG,GAAI;EAC1B;EACCA,IAAI,GAAG,KAAK,IAAIA,IAAI,GAAG,KAAM;EAC9B;EACCA,IAAI,GAAG,KAAK,IAAIA,IAAI,GAAG,KAAM,CAAC,mCAC/B,CAACA,IAAI,GAAG,KAAK,MAAM,KAAK,IACxB,CAACA,IAAI,GAAG,KAAK,MAAM,KAAK,CAAC;EACzB;EACAA,IAAI,GAAG,OAAO,EACd;IACA,OAAO,QAAQ;EACjB;EACA,OAAOG,MAAM,CAACC,YAAY,CAACJ,IAAI,CAAC;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}