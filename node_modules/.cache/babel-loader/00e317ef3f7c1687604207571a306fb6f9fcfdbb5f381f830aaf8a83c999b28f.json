{"ast":null,"code":"import _toConsumableArray from \"C:/mayankcse.github.io/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Value} Value\r\n *\r\n * @typedef {import('unist').Parent} UnistParent\r\n * @typedef {import('unist').Point} Point\r\n *\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').HTML} HTML\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('mdast').Text} Text\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('mdast').ReferenceType} ReferenceType\r\n * @typedef {import('../index.js').CompileData} CompileData\r\n */\n\n/**\r\n * @typedef {Root | Content} Node\r\n * @typedef {Extract<Node, UnistParent>} Parent\r\n *\r\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\r\n */\n\n/**\r\n * @callback Transform\r\n *   Extra transform, to change the AST afterwards.\r\n * @param {Root} tree\r\n *   Tree to transform.\r\n * @returns {Root | undefined | null | void}\r\n *   New tree or nothing (in which case the current tree is used).\r\n *\r\n * @callback Handle\r\n *   Handle a token.\r\n * @param {CompileContext} this\r\n *   Context.\r\n * @param {Token} token\r\n *   Current token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @typedef {Record<string, Handle>} Handles\r\n *   Token types mapping to handles\r\n *\r\n * @callback OnEnterError\r\n *   Handle the case where the `right` token is open, but it is closed (by the\r\n *   `left` token) or because we reached the end of the document.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token | undefined} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @callback OnExitError\r\n *   Handle the case where the `right` token is open but it is closed by\r\n *   exiting the `left` token.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\r\n *   Open token on the stack, with an optional error handler for when\r\n *   that token isn’t closed properly.\r\n */\n\n/**\r\n * @typedef Config\r\n *   Configuration.\r\n *\r\n *   We have our defaults, but extensions will add more.\r\n * @property {Array<string>} canContainEols\r\n *   Token types where line endings are used.\r\n * @property {Handles} enter\r\n *   Opening handles.\r\n * @property {Handles} exit\r\n *   Closing handles.\r\n * @property {Array<Transform>} transforms\r\n *   Tree transforms.\r\n *\r\n * @typedef {Partial<Config>} Extension\r\n *   Change how markdown tokens from micromark are turned into mdast.\r\n *\r\n * @typedef CompileContext\r\n *   mdast compiler context.\r\n * @property {Array<Node | Fragment>} stack\r\n *   Stack of nodes.\r\n * @property {Array<TokenTuple>} tokenStack\r\n *   Stack of tokens.\r\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\r\n *   Get data from the key/value store.\r\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\r\n *   Set data into the key/value store.\r\n * @property {(this: CompileContext) => void} buffer\r\n *   Capture some of the output data.\r\n * @property {(this: CompileContext) => string} resume\r\n *   Stop capturing and access the output data.\r\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\r\n *   Enter a token.\r\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\r\n *   Exit a token.\r\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\r\n *   Get the string value of a token.\r\n * @property {Config} config\r\n *   Configuration.\r\n *\r\n * @typedef FromMarkdownOptions\r\n *   Configuration for how to build mdast.\r\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\r\n *   Extensions for this utility to change how tokens are turned into a tree.\r\n *\r\n * @typedef {ParseOptions & FromMarkdownOptions} Options\r\n *   Configuration.\r\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse } from 'micromark/lib/parse.js';\nimport { preprocess } from 'micromark/lib/preprocess.js';\nimport { postprocess } from 'micromark/lib/postprocess.js';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nvar own = {}.hasOwnProperty;\n\n/**\r\n * @param value\r\n *   Markdown to parse.\r\n * @param encoding\r\n *   Character encoding for when `value` is `Buffer`.\r\n * @param options\r\n *   Configuration.\r\n * @returns\r\n *   mdast tree.\r\n */\nexport var fromMarkdown =\n/**\r\n * @type {(\r\n *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\r\n *   ((value: Value, options?: Options | null | undefined) => Root)\r\n * )}\r\n */\n\n/**\r\n * @param {Value} value\r\n * @param {Encoding | Options | null | undefined} [encoding]\r\n * @param {Options | null | undefined} [options]\r\n * @returns {Root}\r\n */\nfunction fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n};\n\n/**\r\n * Note this compiler only understand complete buffering, not streaming.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  var config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  var data = {};\n  return compile;\n\n  /**\r\n   * Turn micromark events into an mdast tree.\r\n   *\r\n   * @param {Array<Event>} events\r\n   *   Events.\r\n   * @returns {Root}\r\n   *   mdast tree.\r\n   */\n  function compile(events) {\n    /** @type {Root} */\n    var tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    var context = {\n      stack: [tree],\n      tokenStack: [],\n      config: config,\n      enter: enter,\n      exit: exit,\n      buffer: buffer,\n      resume: resume,\n      setData: setData,\n      getData: getData\n    };\n    /** @type {Array<number>} */\n    var listStack = [];\n    var index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === 'listOrdered' || events[index][1].type === 'listUnordered') {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          var tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      var handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      var _tail = context.tokenStack[context.tokenStack.length - 1];\n      var _handler = _tail[1] || defaultOnError;\n      _handler.call(context, undefined, _tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\r\n   * @param {Array<Event>} events\r\n   * @param {number} start\r\n   * @param {number} length\r\n   * @returns {number}\r\n   */\n  function prepareList(events, start, length) {\n    var index = start - 1;\n    var containerBalance = -1;\n    var listSpread = false;\n    /** @type {Token | undefined} */\n    var listItem;\n    /** @type {number | undefined} */\n    var lineIndex;\n    /** @type {number | undefined} */\n    var firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    var atMarker;\n    while (++index <= length) {\n      var event = events[index];\n      if (event[1].type === 'listUnordered' || event[1].type === 'listOrdered' || event[1].type === 'blockQuote') {\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n        atMarker = undefined;\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n            firstBlankLineIndex = index;\n          }\n          atMarker = undefined;\n        }\n      } else if (event[1].type === 'linePrefix' || event[1].type === 'listItemValue' || event[1].type === 'listItemMarker' || event[1].type === 'listItemPrefix' || event[1].type === 'listItemPrefixWhitespace') {\n        // Empty.\n      } else {\n        atMarker = undefined;\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === 'listItemPrefix' || containerBalance === -1 && event[0] === 'exit' && (event[1].type === 'listUnordered' || event[1].type === 'listOrdered')) {\n        if (listItem) {\n          var tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            var tailEvent = events[tailIndex];\n            if (tailEvent[1].type === 'lineEnding' || tailEvent[1].type === 'lineEndingBlank') {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank';\n                listSpread = true;\n              }\n              tailEvent[1].type = 'lineEnding';\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === 'linePrefix' || tailEvent[1].type === 'blockQuotePrefix' || tailEvent[1].type === 'blockQuotePrefixWhitespace' || tailEvent[1].type === 'blockQuoteMarker' || tailEvent[1].type === 'listItemIndent') {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\r\n   * Set data.\r\n   *\r\n   * @template {keyof CompileData} Key\r\n   *   Field type.\r\n   * @param {Key} key\r\n   *   Key of field.\r\n   * @param {CompileData[Key]} [value]\r\n   *   New value.\r\n   * @returns {void}\r\n   *   Nothing.\r\n   */\n  function setData(key, value) {\n    data[key] = value;\n  }\n\n  /**\r\n   * Get data.\r\n   *\r\n   * @template {keyof CompileData} Key\r\n   *   Field type.\r\n   * @param {Key} key\r\n   *   Key of field.\r\n   * @returns {CompileData[Key]}\r\n   *   Value.\r\n   */\n  function getData(key) {\n    return data[key];\n  }\n\n  /**\r\n   * Create an opener handle.\r\n   *\r\n   * @param {(token: Token) => Node} create\r\n   *   Create a node.\r\n   * @param {Handle} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {void}\r\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {void}\r\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\r\n   * @template {Node} Kind\r\n   *   Node type.\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Kind} node\r\n   *   Node to enter.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnEnterError | undefined} [errorHandler]\r\n   *   Handle the case where this token is open, but it is closed by something else.\r\n   * @returns {Kind}\r\n   *   The given node.\r\n   */\n  function enter(node, token, errorHandler) {\n    var parent = this.stack[this.stack.length - 1];\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    };\n    return node;\n  }\n\n  /**\r\n   * Create a closer handle.\r\n   *\r\n   * @param {Handle} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\n  function closer(and) {\n    return close;\n\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {void}\r\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnExitError | undefined} [onExitError]\r\n   *   Handle the case where another token is open.\r\n   * @returns {Node}\r\n   *   The closed node.\r\n   */\n  function exit(token, onExitError) {\n    var node = this.stack.pop();\n    var open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        var handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n    return node;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {string}\r\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true);\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      var ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      setData('expectingFirstListItemValue');\n    }\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitcodefencedfenceinfo() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitcodefencedfencemeta() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return;\n    this.buffer();\n    setData('flowCodeInside', true);\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitcodefenced() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    setData('flowCodeInside');\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitcodeindented() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitdefinitionlabelstring(token) {\n    var label = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitdefinitiontitlestring() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitdefinitiondestinationstring() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitatxheadingsequence(token) {\n    var node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      var depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true);\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitsetextheadinglinesequence(token) {\n    var node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding');\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onenterdata(token) {\n    var node = this.stack[this.stack.length - 1];\n    var tail = node.children[node.children.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      };\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitdata(token) {\n    var tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitlineending(token) {\n    var context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      var tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      setData('atHardBreak');\n      return;\n    }\n    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true);\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexithtmlflow() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexithtmltext() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitcodetext() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitlink() {\n    var node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      var referenceType = getData('referenceType') || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    setData('referenceType');\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitimage() {\n    var node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      var referenceType = getData('referenceType') || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    setData('referenceType');\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitlabeltext(token) {\n    var string = this.sliceSerialize(token);\n    var ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitlabel() {\n    var fragment = this.stack[this.stack.length - 1];\n    var value = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    setData('inReference', true);\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      var children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitresourcedestinationstring() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitresourcetitlestring() {\n    var data = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitresource() {\n    setData('inReference');\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed');\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitreferencestring(token) {\n    var label = this.resume();\n    var node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    setData('referenceType', 'full');\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitcharacterreferencevalue(token) {\n    var data = this.sliceSerialize(token);\n    var type = getData('characterReferenceType');\n    /** @type {string} */\n    var value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === 'characterReferenceMarkerNumeric' ? 10 : 16);\n      setData('characterReferenceType');\n    } else {\n      var result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    var tail = this.stack.pop();\n    tail.value += value;\n    tail.position.end = point(token.end);\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    var node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    var node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\r\n   * @param {Token} token\r\n   * @returns {List}\r\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\r\n   * @param {Token} token\r\n   * @returns {ListItem}\r\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\r\n * Copy a point-like value.\r\n *\r\n * @param {Point} d\r\n *   Point-like value.\r\n * @returns {Point}\r\n *   unist point.\r\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\r\n * @param {Config} combined\r\n * @param {Array<Extension | Array<Extension>>} extensions\r\n * @returns {void}\r\n */\nfunction configure(combined, extensions) {\n  var index = -1;\n  while (++index < extensions.length) {\n    var value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\r\n * @param {Config} combined\r\n * @param {Extension} extension\r\n * @returns {void}\r\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  var key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        var right = extension[key];\n        if (right) {\n          var _combined$key;\n          (_combined$key = combined[key]).push.apply(_combined$key, _toConsumableArray(right));\n        }\n      } else if (key === 'transforms') {\n        var _right = extension[key];\n        if (_right) {\n          var _combined$key2;\n          (_combined$key2 = combined[key]).push.apply(_combined$key2, _toConsumableArray(_right));\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        var _right2 = extension[key];\n        if (_right2) {\n          Object.assign(combined[key], _right2);\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","map":{"version":3,"names":["toString","parse","preprocess","postprocess","decodeNumericCharacterReference","decodeString","normalizeIdentifier","decodeNamedCharacterReference","stringifyPosition","own","hasOwnProperty","fromMarkdown","value","encoding","options","undefined","compiler","document","write","config","transforms","canContainEols","enter","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","heading","blockQuote","characterEscape","characterReference","codeFenced","codeFlow","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","codeText","codeTextData","data","codeFlowValue","definition","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","label","listItem","listItemValue","onenterlistitemvalue","listOrdered","list","onenterlistordered","listUnordered","paragraph","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","exit","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","lineEnding","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","events","tree","type","children","context","stack","tokenStack","resume","setData","getData","listStack","index","length","push","tail","pop","prepareList","handler","call","Object","assign","sliceSerialize","defaultOnError","position","start","point","line","column","offset","end","containerBalance","listSpread","lineIndex","firstBlankLineIndex","atMarker","event","tailIndex","tailEvent","_spread","splice","key","create","and","open","token","node","errorHandler","parent","close","onExitError","Error","ancestor","Number","parseInt","lang","meta","replace","identifier","toLowerCase","title","url","depth","charCodeAt","text","includes","referenceType","string","fragment","alt","result","ordered","spread","checked","d","combined","extensions","Array","isArray","extension","right","_combined$key","apply","_toConsumableArray","_combined$key2","left"],"sources":["C:/mayankcse.github.io/node_modules/mdast-util-from-markdown/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Event} Event\r\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Value} Value\r\n *\r\n * @typedef {import('unist').Parent} UnistParent\r\n * @typedef {import('unist').Point} Point\r\n *\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Break} Break\r\n * @typedef {import('mdast').Blockquote} Blockquote\r\n * @typedef {import('mdast').Code} Code\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').Emphasis} Emphasis\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').HTML} HTML\r\n * @typedef {import('mdast').Image} Image\r\n * @typedef {import('mdast').ImageReference} ImageReference\r\n * @typedef {import('mdast').InlineCode} InlineCode\r\n * @typedef {import('mdast').Link} Link\r\n * @typedef {import('mdast').LinkReference} LinkReference\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').Paragraph} Paragraph\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Strong} Strong\r\n * @typedef {import('mdast').Text} Text\r\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\r\n * @typedef {import('mdast').ReferenceType} ReferenceType\r\n * @typedef {import('../index.js').CompileData} CompileData\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Node\r\n * @typedef {Extract<Node, UnistParent>} Parent\r\n *\r\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\r\n */\r\n\r\n/**\r\n * @callback Transform\r\n *   Extra transform, to change the AST afterwards.\r\n * @param {Root} tree\r\n *   Tree to transform.\r\n * @returns {Root | undefined | null | void}\r\n *   New tree or nothing (in which case the current tree is used).\r\n *\r\n * @callback Handle\r\n *   Handle a token.\r\n * @param {CompileContext} this\r\n *   Context.\r\n * @param {Token} token\r\n *   Current token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @typedef {Record<string, Handle>} Handles\r\n *   Token types mapping to handles\r\n *\r\n * @callback OnEnterError\r\n *   Handle the case where the `right` token is open, but it is closed (by the\r\n *   `left` token) or because we reached the end of the document.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token | undefined} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @callback OnExitError\r\n *   Handle the case where the `right` token is open but it is closed by\r\n *   exiting the `left` token.\r\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\r\n *   Context.\r\n * @param {Token} left\r\n *   Left token.\r\n * @param {Token} right\r\n *   Right token.\r\n * @returns {void}\r\n *   Nothing.\r\n *\r\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\r\n *   Open token on the stack, with an optional error handler for when\r\n *   that token isn’t closed properly.\r\n */\r\n\r\n/**\r\n * @typedef Config\r\n *   Configuration.\r\n *\r\n *   We have our defaults, but extensions will add more.\r\n * @property {Array<string>} canContainEols\r\n *   Token types where line endings are used.\r\n * @property {Handles} enter\r\n *   Opening handles.\r\n * @property {Handles} exit\r\n *   Closing handles.\r\n * @property {Array<Transform>} transforms\r\n *   Tree transforms.\r\n *\r\n * @typedef {Partial<Config>} Extension\r\n *   Change how markdown tokens from micromark are turned into mdast.\r\n *\r\n * @typedef CompileContext\r\n *   mdast compiler context.\r\n * @property {Array<Node | Fragment>} stack\r\n *   Stack of nodes.\r\n * @property {Array<TokenTuple>} tokenStack\r\n *   Stack of tokens.\r\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\r\n *   Get data from the key/value store.\r\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\r\n *   Set data into the key/value store.\r\n * @property {(this: CompileContext) => void} buffer\r\n *   Capture some of the output data.\r\n * @property {(this: CompileContext) => string} resume\r\n *   Stop capturing and access the output data.\r\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\r\n *   Enter a token.\r\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\r\n *   Exit a token.\r\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\r\n *   Get the string value of a token.\r\n * @property {Config} config\r\n *   Configuration.\r\n *\r\n * @typedef FromMarkdownOptions\r\n *   Configuration for how to build mdast.\r\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\r\n *   Extensions for this utility to change how tokens are turned into a tree.\r\n *\r\n * @typedef {ParseOptions & FromMarkdownOptions} Options\r\n *   Configuration.\r\n */\r\n\r\n// To do: micromark: create a registry of tokens?\r\n// To do: next major: don’t return given `Node` from `enter`.\r\n// To do: next major: remove setter/getter.\r\n\r\nimport {toString} from 'mdast-util-to-string'\r\nimport {parse} from 'micromark/lib/parse.js'\r\nimport {preprocess} from 'micromark/lib/preprocess.js'\r\nimport {postprocess} from 'micromark/lib/postprocess.js'\r\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\r\nimport {decodeString} from 'micromark-util-decode-string'\r\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {stringifyPosition} from 'unist-util-stringify-position'\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * @param value\r\n *   Markdown to parse.\r\n * @param encoding\r\n *   Character encoding for when `value` is `Buffer`.\r\n * @param options\r\n *   Configuration.\r\n * @returns\r\n *   mdast tree.\r\n */\r\nexport const fromMarkdown =\r\n  /**\r\n   * @type {(\r\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\r\n   *   ((value: Value, options?: Options | null | undefined) => Root)\r\n   * )}\r\n   */\r\n\r\n  /**\r\n   * @param {Value} value\r\n   * @param {Encoding | Options | null | undefined} [encoding]\r\n   * @param {Options | null | undefined} [options]\r\n   * @returns {Root}\r\n   */\r\n  function (value, encoding, options) {\r\n    if (typeof encoding !== 'string') {\r\n      options = encoding\r\n      encoding = undefined\r\n    }\r\n    return compiler(options)(\r\n      postprocess(\r\n        parse(options).document().write(preprocess()(value, encoding, true))\r\n      )\r\n    )\r\n  }\r\n\r\n/**\r\n * Note this compiler only understand complete buffering, not streaming.\r\n *\r\n * @param {Options | null | undefined} [options]\r\n */\r\nfunction compiler(options) {\r\n  /** @type {Config} */\r\n  const config = {\r\n    transforms: [],\r\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\r\n    enter: {\r\n      autolink: opener(link),\r\n      autolinkProtocol: onenterdata,\r\n      autolinkEmail: onenterdata,\r\n      atxHeading: opener(heading),\r\n      blockQuote: opener(blockQuote),\r\n      characterEscape: onenterdata,\r\n      characterReference: onenterdata,\r\n      codeFenced: opener(codeFlow),\r\n      codeFencedFenceInfo: buffer,\r\n      codeFencedFenceMeta: buffer,\r\n      codeIndented: opener(codeFlow, buffer),\r\n      codeText: opener(codeText, buffer),\r\n      codeTextData: onenterdata,\r\n      data: onenterdata,\r\n      codeFlowValue: onenterdata,\r\n      definition: opener(definition),\r\n      definitionDestinationString: buffer,\r\n      definitionLabelString: buffer,\r\n      definitionTitleString: buffer,\r\n      emphasis: opener(emphasis),\r\n      hardBreakEscape: opener(hardBreak),\r\n      hardBreakTrailing: opener(hardBreak),\r\n      htmlFlow: opener(html, buffer),\r\n      htmlFlowData: onenterdata,\r\n      htmlText: opener(html, buffer),\r\n      htmlTextData: onenterdata,\r\n      image: opener(image),\r\n      label: buffer,\r\n      link: opener(link),\r\n      listItem: opener(listItem),\r\n      listItemValue: onenterlistitemvalue,\r\n      listOrdered: opener(list, onenterlistordered),\r\n      listUnordered: opener(list),\r\n      paragraph: opener(paragraph),\r\n      reference: onenterreference,\r\n      referenceString: buffer,\r\n      resourceDestinationString: buffer,\r\n      resourceTitleString: buffer,\r\n      setextHeading: opener(heading),\r\n      strong: opener(strong),\r\n      thematicBreak: opener(thematicBreak)\r\n    },\r\n    exit: {\r\n      atxHeading: closer(),\r\n      atxHeadingSequence: onexitatxheadingsequence,\r\n      autolink: closer(),\r\n      autolinkEmail: onexitautolinkemail,\r\n      autolinkProtocol: onexitautolinkprotocol,\r\n      blockQuote: closer(),\r\n      characterEscapeValue: onexitdata,\r\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\r\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\r\n      characterReferenceValue: onexitcharacterreferencevalue,\r\n      codeFenced: closer(onexitcodefenced),\r\n      codeFencedFence: onexitcodefencedfence,\r\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\r\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\r\n      codeFlowValue: onexitdata,\r\n      codeIndented: closer(onexitcodeindented),\r\n      codeText: closer(onexitcodetext),\r\n      codeTextData: onexitdata,\r\n      data: onexitdata,\r\n      definition: closer(),\r\n      definitionDestinationString: onexitdefinitiondestinationstring,\r\n      definitionLabelString: onexitdefinitionlabelstring,\r\n      definitionTitleString: onexitdefinitiontitlestring,\r\n      emphasis: closer(),\r\n      hardBreakEscape: closer(onexithardbreak),\r\n      hardBreakTrailing: closer(onexithardbreak),\r\n      htmlFlow: closer(onexithtmlflow),\r\n      htmlFlowData: onexitdata,\r\n      htmlText: closer(onexithtmltext),\r\n      htmlTextData: onexitdata,\r\n      image: closer(onexitimage),\r\n      label: onexitlabel,\r\n      labelText: onexitlabeltext,\r\n      lineEnding: onexitlineending,\r\n      link: closer(onexitlink),\r\n      listItem: closer(),\r\n      listOrdered: closer(),\r\n      listUnordered: closer(),\r\n      paragraph: closer(),\r\n      referenceString: onexitreferencestring,\r\n      resourceDestinationString: onexitresourcedestinationstring,\r\n      resourceTitleString: onexitresourcetitlestring,\r\n      resource: onexitresource,\r\n      setextHeading: closer(onexitsetextheading),\r\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\r\n      setextHeadingText: onexitsetextheadingtext,\r\n      strong: closer(),\r\n      thematicBreak: closer()\r\n    }\r\n  }\r\n  configure(config, (options || {}).mdastExtensions || [])\r\n\r\n  /** @type {CompileData} */\r\n  const data = {}\r\n  return compile\r\n\r\n  /**\r\n   * Turn micromark events into an mdast tree.\r\n   *\r\n   * @param {Array<Event>} events\r\n   *   Events.\r\n   * @returns {Root}\r\n   *   mdast tree.\r\n   */\r\n  function compile(events) {\r\n    /** @type {Root} */\r\n    let tree = {\r\n      type: 'root',\r\n      children: []\r\n    }\r\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\r\n    const context = {\r\n      stack: [tree],\r\n      tokenStack: [],\r\n      config,\r\n      enter,\r\n      exit,\r\n      buffer,\r\n      resume,\r\n      setData,\r\n      getData\r\n    }\r\n    /** @type {Array<number>} */\r\n    const listStack = []\r\n    let index = -1\r\n    while (++index < events.length) {\r\n      // We preprocess lists to add `listItem` tokens, and to infer whether\r\n      // items the list itself are spread out.\r\n      if (\r\n        events[index][1].type === 'listOrdered' ||\r\n        events[index][1].type === 'listUnordered'\r\n      ) {\r\n        if (events[index][0] === 'enter') {\r\n          listStack.push(index)\r\n        } else {\r\n          const tail = listStack.pop()\r\n          index = prepareList(events, tail, index)\r\n        }\r\n      }\r\n    }\r\n    index = -1\r\n    while (++index < events.length) {\r\n      const handler = config[events[index][0]]\r\n      if (own.call(handler, events[index][1].type)) {\r\n        handler[events[index][1].type].call(\r\n          Object.assign(\r\n            {\r\n              sliceSerialize: events[index][2].sliceSerialize\r\n            },\r\n            context\r\n          ),\r\n          events[index][1]\r\n        )\r\n      }\r\n    }\r\n\r\n    // Handle tokens still being open.\r\n    if (context.tokenStack.length > 0) {\r\n      const tail = context.tokenStack[context.tokenStack.length - 1]\r\n      const handler = tail[1] || defaultOnError\r\n      handler.call(context, undefined, tail[0])\r\n    }\r\n\r\n    // Figure out `root` position.\r\n    tree.position = {\r\n      start: point(\r\n        events.length > 0\r\n          ? events[0][1].start\r\n          : {\r\n              line: 1,\r\n              column: 1,\r\n              offset: 0\r\n            }\r\n      ),\r\n      end: point(\r\n        events.length > 0\r\n          ? events[events.length - 2][1].end\r\n          : {\r\n              line: 1,\r\n              column: 1,\r\n              offset: 0\r\n            }\r\n      )\r\n    }\r\n\r\n    // Call transforms.\r\n    index = -1\r\n    while (++index < config.transforms.length) {\r\n      tree = config.transforms[index](tree) || tree\r\n    }\r\n    return tree\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Event>} events\r\n   * @param {number} start\r\n   * @param {number} length\r\n   * @returns {number}\r\n   */\r\n  function prepareList(events, start, length) {\r\n    let index = start - 1\r\n    let containerBalance = -1\r\n    let listSpread = false\r\n    /** @type {Token | undefined} */\r\n    let listItem\r\n    /** @type {number | undefined} */\r\n    let lineIndex\r\n    /** @type {number | undefined} */\r\n    let firstBlankLineIndex\r\n    /** @type {boolean | undefined} */\r\n    let atMarker\r\n    while (++index <= length) {\r\n      const event = events[index]\r\n      if (\r\n        event[1].type === 'listUnordered' ||\r\n        event[1].type === 'listOrdered' ||\r\n        event[1].type === 'blockQuote'\r\n      ) {\r\n        if (event[0] === 'enter') {\r\n          containerBalance++\r\n        } else {\r\n          containerBalance--\r\n        }\r\n        atMarker = undefined\r\n      } else if (event[1].type === 'lineEndingBlank') {\r\n        if (event[0] === 'enter') {\r\n          if (\r\n            listItem &&\r\n            !atMarker &&\r\n            !containerBalance &&\r\n            !firstBlankLineIndex\r\n          ) {\r\n            firstBlankLineIndex = index\r\n          }\r\n          atMarker = undefined\r\n        }\r\n      } else if (\r\n        event[1].type === 'linePrefix' ||\r\n        event[1].type === 'listItemValue' ||\r\n        event[1].type === 'listItemMarker' ||\r\n        event[1].type === 'listItemPrefix' ||\r\n        event[1].type === 'listItemPrefixWhitespace'\r\n      ) {\r\n        // Empty.\r\n      } else {\r\n        atMarker = undefined\r\n      }\r\n      if (\r\n        (!containerBalance &&\r\n          event[0] === 'enter' &&\r\n          event[1].type === 'listItemPrefix') ||\r\n        (containerBalance === -1 &&\r\n          event[0] === 'exit' &&\r\n          (event[1].type === 'listUnordered' ||\r\n            event[1].type === 'listOrdered'))\r\n      ) {\r\n        if (listItem) {\r\n          let tailIndex = index\r\n          lineIndex = undefined\r\n          while (tailIndex--) {\r\n            const tailEvent = events[tailIndex]\r\n            if (\r\n              tailEvent[1].type === 'lineEnding' ||\r\n              tailEvent[1].type === 'lineEndingBlank'\r\n            ) {\r\n              if (tailEvent[0] === 'exit') continue\r\n              if (lineIndex) {\r\n                events[lineIndex][1].type = 'lineEndingBlank'\r\n                listSpread = true\r\n              }\r\n              tailEvent[1].type = 'lineEnding'\r\n              lineIndex = tailIndex\r\n            } else if (\r\n              tailEvent[1].type === 'linePrefix' ||\r\n              tailEvent[1].type === 'blockQuotePrefix' ||\r\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\r\n              tailEvent[1].type === 'blockQuoteMarker' ||\r\n              tailEvent[1].type === 'listItemIndent'\r\n            ) {\r\n              // Empty\r\n            } else {\r\n              break\r\n            }\r\n          }\r\n          if (\r\n            firstBlankLineIndex &&\r\n            (!lineIndex || firstBlankLineIndex < lineIndex)\r\n          ) {\r\n            listItem._spread = true\r\n          }\r\n\r\n          // Fix position.\r\n          listItem.end = Object.assign(\r\n            {},\r\n            lineIndex ? events[lineIndex][1].start : event[1].end\r\n          )\r\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\r\n          index++\r\n          length++\r\n        }\r\n\r\n        // Create a new list item.\r\n        if (event[1].type === 'listItemPrefix') {\r\n          listItem = {\r\n            type: 'listItem',\r\n            _spread: false,\r\n            start: Object.assign({}, event[1].start),\r\n            // @ts-expect-error: we’ll add `end` in a second.\r\n            end: undefined\r\n          }\r\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\r\n          events.splice(index, 0, ['enter', listItem, event[2]])\r\n          index++\r\n          length++\r\n          firstBlankLineIndex = undefined\r\n          atMarker = true\r\n        }\r\n      }\r\n    }\r\n    events[start][1]._spread = listSpread\r\n    return length\r\n  }\r\n\r\n  /**\r\n   * Set data.\r\n   *\r\n   * @template {keyof CompileData} Key\r\n   *   Field type.\r\n   * @param {Key} key\r\n   *   Key of field.\r\n   * @param {CompileData[Key]} [value]\r\n   *   New value.\r\n   * @returns {void}\r\n   *   Nothing.\r\n   */\r\n  function setData(key, value) {\r\n    data[key] = value\r\n  }\r\n\r\n  /**\r\n   * Get data.\r\n   *\r\n   * @template {keyof CompileData} Key\r\n   *   Field type.\r\n   * @param {Key} key\r\n   *   Key of field.\r\n   * @returns {CompileData[Key]}\r\n   *   Value.\r\n   */\r\n  function getData(key) {\r\n    return data[key]\r\n  }\r\n\r\n  /**\r\n   * Create an opener handle.\r\n   *\r\n   * @param {(token: Token) => Node} create\r\n   *   Create a node.\r\n   * @param {Handle} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function opener(create, and) {\r\n    return open\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {void}\r\n     */\r\n    function open(token) {\r\n      enter.call(this, create(token), token)\r\n      if (and) and.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {void}\r\n   */\r\n  function buffer() {\r\n    this.stack.push({\r\n      type: 'fragment',\r\n      children: []\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @template {Node} Kind\r\n   *   Node type.\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Kind} node\r\n   *   Node to enter.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnEnterError | undefined} [errorHandler]\r\n   *   Handle the case where this token is open, but it is closed by something else.\r\n   * @returns {Kind}\r\n   *   The given node.\r\n   */\r\n  function enter(node, token, errorHandler) {\r\n    const parent = this.stack[this.stack.length - 1]\r\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\r\n    parent.children.push(node)\r\n    this.stack.push(node)\r\n    this.tokenStack.push([token, errorHandler])\r\n    // @ts-expect-error: `end` will be patched later.\r\n    node.position = {\r\n      start: point(token.start)\r\n    }\r\n    return node\r\n  }\r\n\r\n  /**\r\n   * Create a closer handle.\r\n   *\r\n   * @param {Handle} [and]\r\n   *   Optional function to also run.\r\n   * @returns {Handle}\r\n   *   Handle.\r\n   */\r\n  function closer(and) {\r\n    return close\r\n\r\n    /**\r\n     * @this {CompileContext}\r\n     * @param {Token} token\r\n     * @returns {void}\r\n     */\r\n    function close(token) {\r\n      if (and) and.call(this, token)\r\n      exit.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   *   Context.\r\n   * @param {Token} token\r\n   *   Corresponding token.\r\n   * @param {OnExitError | undefined} [onExitError]\r\n   *   Handle the case where another token is open.\r\n   * @returns {Node}\r\n   *   The closed node.\r\n   */\r\n  function exit(token, onExitError) {\r\n    const node = this.stack.pop()\r\n    const open = this.tokenStack.pop()\r\n    if (!open) {\r\n      throw new Error(\r\n        'Cannot close `' +\r\n          token.type +\r\n          '` (' +\r\n          stringifyPosition({\r\n            start: token.start,\r\n            end: token.end\r\n          }) +\r\n          '): it’s not open'\r\n      )\r\n    } else if (open[0].type !== token.type) {\r\n      if (onExitError) {\r\n        onExitError.call(this, token, open[0])\r\n      } else {\r\n        const handler = open[1] || defaultOnError\r\n        handler.call(this, token, open[0])\r\n      }\r\n    }\r\n    node.position.end = point(token.end)\r\n    return node\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @returns {string}\r\n   */\r\n  function resume() {\r\n    return toString(this.stack.pop())\r\n  }\r\n\r\n  //\r\n  // Handlers.\r\n  //\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistordered() {\r\n    setData('expectingFirstListItemValue', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onenterlistitemvalue(token) {\r\n    if (getData('expectingFirstListItemValue')) {\r\n      const ancestor = this.stack[this.stack.length - 2]\r\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\r\n      setData('expectingFirstListItemValue')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfenceinfo() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.lang = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfencemeta() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.meta = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefencedfence() {\r\n    // Exit if this is the closing fence.\r\n    if (getData('flowCodeInside')) return\r\n    this.buffer()\r\n    setData('flowCodeInside', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodefenced() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\r\n    setData('flowCodeInside')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcodeindented() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitionlabelstring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.label = label\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiontitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitdefinitiondestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitatxheadingsequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    if (!node.depth) {\r\n      const depth = this.sliceSerialize(token).length\r\n      node.depth = depth\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadingtext() {\r\n    setData('setextHeadingSlurpLineEnding', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheadinglinesequence(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitsetextheading() {\r\n    setData('setextHeadingSlurpLineEnding')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterdata(token) {\r\n    const node = this.stack[this.stack.length - 1]\r\n    let tail = node.children[node.children.length - 1]\r\n    if (!tail || tail.type !== 'text') {\r\n      // Add a new text node.\r\n      tail = text()\r\n      // @ts-expect-error: we’ll add `end` later.\r\n      tail.position = {\r\n        start: point(token.start)\r\n      }\r\n      // @ts-expect-error: Assume `parent` accepts `text`.\r\n      node.children.push(tail)\r\n    }\r\n    this.stack.push(tail)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitdata(token) {\r\n    const tail = this.stack.pop()\r\n    tail.value += this.sliceSerialize(token)\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlineending(token) {\r\n    const context = this.stack[this.stack.length - 1]\r\n    // If we’re at a hard break, include the line ending in there.\r\n    if (getData('atHardBreak')) {\r\n      const tail = context.children[context.children.length - 1]\r\n      tail.position.end = point(token.end)\r\n      setData('atHardBreak')\r\n      return\r\n    }\r\n    if (\r\n      !getData('setextHeadingSlurpLineEnding') &&\r\n      config.canContainEols.includes(context.type)\r\n    ) {\r\n      onenterdata.call(this, token)\r\n      onexitdata.call(this, token)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithardbreak() {\r\n    setData('atHardBreak', true)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmlflow() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexithtmltext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcodetext() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.value = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlink() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n    // To do: clean.\r\n    if (getData('inReference')) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = getData('referenceType') || 'shortcut'\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n    setData('referenceType')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitimage() {\r\n    const node = this.stack[this.stack.length - 1]\r\n    // Note: there are also `identifier` and `label` fields on this link node!\r\n    // These are used / cleaned here.\r\n    // To do: clean.\r\n    if (getData('inReference')) {\r\n      /** @type {ReferenceType} */\r\n      const referenceType = getData('referenceType') || 'shortcut'\r\n      node.type += 'Reference'\r\n      // @ts-expect-error: mutate.\r\n      node.referenceType = referenceType\r\n      // @ts-expect-error: mutate.\r\n      delete node.url\r\n      delete node.title\r\n    } else {\r\n      // @ts-expect-error: mutate.\r\n      delete node.identifier\r\n      // @ts-expect-error: mutate.\r\n      delete node.label\r\n    }\r\n    setData('referenceType')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabeltext(token) {\r\n    const string = this.sliceSerialize(token)\r\n    const ancestor = this.stack[this.stack.length - 2]\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    ancestor.label = decodeString(string)\r\n    // @ts-expect-error: same as above.\r\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitlabel() {\r\n    const fragment = this.stack[this.stack.length - 1]\r\n    const value = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    // Assume a reference.\r\n    setData('inReference', true)\r\n    if (node.type === 'link') {\r\n      /** @type {Array<StaticPhrasingContent>} */\r\n      // @ts-expect-error: Assume static phrasing content.\r\n      const children = fragment.children\r\n      node.children = children\r\n    } else {\r\n      node.alt = value\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcedestinationstring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.url = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresourcetitlestring() {\r\n    const data = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.title = data\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitresource() {\r\n    setData('inReference')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onenterreference() {\r\n    setData('referenceType', 'collapsed')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitreferencestring(token) {\r\n    const label = this.resume()\r\n    const node = this.stack[this.stack.length - 1]\r\n    // @ts-expect-error: stash this on the node, as it might become a reference\r\n    // later.\r\n    node.label = label\r\n    // @ts-expect-error: same as above.\r\n    node.identifier = normalizeIdentifier(\r\n      this.sliceSerialize(token)\r\n    ).toLowerCase()\r\n    setData('referenceType', 'full')\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n\r\n  function onexitcharacterreferencemarker(token) {\r\n    setData('characterReferenceType', token.type)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitcharacterreferencevalue(token) {\r\n    const data = this.sliceSerialize(token)\r\n    const type = getData('characterReferenceType')\r\n    /** @type {string} */\r\n    let value\r\n    if (type) {\r\n      value = decodeNumericCharacterReference(\r\n        data,\r\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\r\n      )\r\n      setData('characterReferenceType')\r\n    } else {\r\n      const result = decodeNamedCharacterReference(data)\r\n      value = result\r\n    }\r\n    const tail = this.stack.pop()\r\n    tail.value += value\r\n    tail.position.end = point(token.end)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkprotocol(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.url = this.sliceSerialize(token)\r\n  }\r\n\r\n  /**\r\n   * @this {CompileContext}\r\n   * @type {Handle}\r\n   */\r\n  function onexitautolinkemail(token) {\r\n    onexitdata.call(this, token)\r\n    const node = this.stack[this.stack.length - 1]\r\n    node.url = 'mailto:' + this.sliceSerialize(token)\r\n  }\r\n\r\n  //\r\n  // Creaters.\r\n  //\r\n\r\n  /** @returns {Blockquote} */\r\n  function blockQuote() {\r\n    return {\r\n      type: 'blockquote',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Code} */\r\n  function codeFlow() {\r\n    return {\r\n      type: 'code',\r\n      lang: null,\r\n      meta: null,\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {InlineCode} */\r\n  function codeText() {\r\n    return {\r\n      type: 'inlineCode',\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {Definition} */\r\n  function definition() {\r\n    return {\r\n      type: 'definition',\r\n      identifier: '',\r\n      label: null,\r\n      title: null,\r\n      url: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {Emphasis} */\r\n  function emphasis() {\r\n    return {\r\n      type: 'emphasis',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Heading} */\r\n  function heading() {\r\n    // @ts-expect-error `depth` will be set later.\r\n    return {\r\n      type: 'heading',\r\n      depth: undefined,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Break} */\r\n  function hardBreak() {\r\n    return {\r\n      type: 'break'\r\n    }\r\n  }\r\n\r\n  /** @returns {HTML} */\r\n  function html() {\r\n    return {\r\n      type: 'html',\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {Image} */\r\n  function image() {\r\n    return {\r\n      type: 'image',\r\n      title: null,\r\n      url: '',\r\n      alt: null\r\n    }\r\n  }\r\n\r\n  /** @returns {Link} */\r\n  function link() {\r\n    return {\r\n      type: 'link',\r\n      title: null,\r\n      url: '',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {List}\r\n   */\r\n  function list(token) {\r\n    return {\r\n      type: 'list',\r\n      ordered: token.type === 'listOrdered',\r\n      start: null,\r\n      spread: token._spread,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @returns {ListItem}\r\n   */\r\n  function listItem(token) {\r\n    return {\r\n      type: 'listItem',\r\n      spread: token._spread,\r\n      checked: null,\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Paragraph} */\r\n  function paragraph() {\r\n    return {\r\n      type: 'paragraph',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Strong} */\r\n  function strong() {\r\n    return {\r\n      type: 'strong',\r\n      children: []\r\n    }\r\n  }\r\n\r\n  /** @returns {Text} */\r\n  function text() {\r\n    return {\r\n      type: 'text',\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  /** @returns {ThematicBreak} */\r\n  function thematicBreak() {\r\n    return {\r\n      type: 'thematicBreak'\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Copy a point-like value.\r\n *\r\n * @param {Point} d\r\n *   Point-like value.\r\n * @returns {Point}\r\n *   unist point.\r\n */\r\nfunction point(d) {\r\n  return {\r\n    line: d.line,\r\n    column: d.column,\r\n    offset: d.offset\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Array<Extension | Array<Extension>>} extensions\r\n * @returns {void}\r\n */\r\nfunction configure(combined, extensions) {\r\n  let index = -1\r\n  while (++index < extensions.length) {\r\n    const value = extensions[index]\r\n    if (Array.isArray(value)) {\r\n      configure(combined, value)\r\n    } else {\r\n      extension(combined, value)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Config} combined\r\n * @param {Extension} extension\r\n * @returns {void}\r\n */\r\nfunction extension(combined, extension) {\r\n  /** @type {keyof Extension} */\r\n  let key\r\n  for (key in extension) {\r\n    if (own.call(extension, key)) {\r\n      if (key === 'canContainEols') {\r\n        const right = extension[key]\r\n        if (right) {\r\n          combined[key].push(...right)\r\n        }\r\n      } else if (key === 'transforms') {\r\n        const right = extension[key]\r\n        if (right) {\r\n          combined[key].push(...right)\r\n        }\r\n      } else if (key === 'enter' || key === 'exit') {\r\n        const right = extension[key]\r\n        if (right) {\r\n          Object.assign(combined[key], right)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @type {OnEnterError} */\r\nfunction defaultOnError(left, right) {\r\n  if (left) {\r\n    throw new Error(\r\n      'Cannot close `' +\r\n        left.type +\r\n        '` (' +\r\n        stringifyPosition({\r\n          start: left.start,\r\n          end: left.end\r\n        }) +\r\n        '): a different token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({\r\n          start: right.start,\r\n          end: right.end\r\n        }) +\r\n        ') is open'\r\n    )\r\n  } else {\r\n    throw new Error(\r\n      'Cannot close document, a token (`' +\r\n        right.type +\r\n        '`, ' +\r\n        stringifyPosition({\r\n          start: right.start,\r\n          end: right.end\r\n        }) +\r\n        ') is still open'\r\n    )\r\n  }\r\n}\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}