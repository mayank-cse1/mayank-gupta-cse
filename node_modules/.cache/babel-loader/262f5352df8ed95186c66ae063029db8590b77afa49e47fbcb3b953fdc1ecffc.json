{"ast":null,"code":"import _toConsumableArray from \"C:/Users/mayan/source/repos/mayankcse.github.io/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\r\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\r\n * @typedef {(...input: Array<any>) => any} Middleware\r\n *\r\n * @typedef {(...input: Array<any>) => void} Run\r\n *   Call all middleware.\r\n * @typedef {(fn: Middleware) => Pipeline} Use\r\n *   Add `fn` (middleware) to the list.\r\n * @typedef {{run: Run, use: Use}} Pipeline\r\n *   Middleware.\r\n */\n\n/**\r\n * Create new middleware.\r\n *\r\n * @returns {Pipeline}\r\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  var fns = [];\n  /** @type {Pipeline} */\n  var pipeline = {\n    run: run,\n    use: use\n  };\n  return pipeline;\n\n  /** @type {Run} */\n  function run() {\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n    var middlewareIndex = -1;\n    /** @type {Callback} */\n    var callback = values.pop();\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback);\n    }\n    next.apply(void 0, [null].concat(_toConsumableArray(values)));\n\n    /**\r\n     * Run the next `fn`, or we’re done.\r\n     *\r\n     * @param {Error|null|undefined} error\r\n     * @param {Array<any>} output\r\n     */\n    function next(error) {\n      var fn = fns[++middlewareIndex];\n      var index = -1;\n      if (error) {\n        callback(error);\n        return;\n      }\n\n      // Copy non-nullish input into values.\n      for (var _len2 = arguments.length, output = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        output[_key2 - 1] = arguments[_key2];\n      }\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index];\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output;\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next).apply(void 0, output);\n      } else {\n        callback.apply(void 0, [null].concat(output));\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError('Expected `middelware` to be a function, not ' + middelware);\n    }\n    fns.push(middelware);\n    return pipeline;\n  }\n}\n\n/**\r\n * Wrap `middleware`.\r\n * Can be sync or async; return a promise, receive a callback, or return new\r\n * values and errors.\r\n *\r\n * @param {Middleware} middleware\r\n * @param {Callback} callback\r\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  var called;\n  return wrapped;\n\n  /**\r\n   * Call `middleware`.\r\n   * @this {any}\r\n   * @param {Array<any>} parameters\r\n   * @returns {void}\r\n   */\n  function wrapped() {\n    for (var _len3 = arguments.length, parameters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      parameters[_key3] = arguments[_key3];\n    }\n    var fnExpectsCallback = middleware.length > parameters.length;\n    /** @type {any} */\n    var result;\n    if (fnExpectsCallback) {\n      parameters.push(done);\n    }\n    try {\n      result = middleware.apply(this, parameters);\n    } catch (error) {\n      var exception = /** @type {Error} */error;\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception;\n      }\n      return done(exception);\n    }\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done);\n      } else if (result instanceof Error) {\n        done(result);\n      } else {\n        then(result);\n      }\n    }\n  }\n\n  /**\r\n   * Call `callback`, only once.\r\n   * @type {Callback}\r\n   */\n  function done(error) {\n    if (!called) {\n      called = true;\n      for (var _len4 = arguments.length, output = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        output[_key4 - 1] = arguments[_key4];\n      }\n      callback.apply(void 0, [error].concat(output));\n    }\n  }\n\n  /**\r\n   * Call `done` with one value.\r\n   *\r\n   * @param {any} [value]\r\n   */\n  function then(value) {\n    done(null, value);\n  }\n}","map":{"version":3,"names":["trough","fns","pipeline","run","use","_len","arguments","length","values","Array","_key","middlewareIndex","callback","pop","TypeError","next","apply","concat","_toConsumableArray","error","fn","index","_len2","output","_key2","undefined","wrap","middelware","push","middleware","called","wrapped","_len3","parameters","_key3","fnExpectsCallback","result","done","exception","Promise","then","Error","_len4","_key4","value"],"sources":["C:/Users/mayan/source/repos/mayankcse.github.io/node_modules/trough/index.js"],"sourcesContent":["/**\r\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\r\n * @typedef {(...input: Array<any>) => any} Middleware\r\n *\r\n * @typedef {(...input: Array<any>) => void} Run\r\n *   Call all middleware.\r\n * @typedef {(fn: Middleware) => Pipeline} Use\r\n *   Add `fn` (middleware) to the list.\r\n * @typedef {{run: Run, use: Use}} Pipeline\r\n *   Middleware.\r\n */\r\n\r\n/**\r\n * Create new middleware.\r\n *\r\n * @returns {Pipeline}\r\n */\r\nexport function trough() {\r\n  /** @type {Array<Middleware>} */\r\n  const fns = []\r\n  /** @type {Pipeline} */\r\n  const pipeline = {run, use}\r\n\r\n  return pipeline\r\n\r\n  /** @type {Run} */\r\n  function run(...values) {\r\n    let middlewareIndex = -1\r\n    /** @type {Callback} */\r\n    const callback = values.pop()\r\n\r\n    if (typeof callback !== 'function') {\r\n      throw new TypeError('Expected function as last argument, not ' + callback)\r\n    }\r\n\r\n    next(null, ...values)\r\n\r\n    /**\r\n     * Run the next `fn`, or we’re done.\r\n     *\r\n     * @param {Error|null|undefined} error\r\n     * @param {Array<any>} output\r\n     */\r\n    function next(error, ...output) {\r\n      const fn = fns[++middlewareIndex]\r\n      let index = -1\r\n\r\n      if (error) {\r\n        callback(error)\r\n        return\r\n      }\r\n\r\n      // Copy non-nullish input into values.\r\n      while (++index < values.length) {\r\n        if (output[index] === null || output[index] === undefined) {\r\n          output[index] = values[index]\r\n        }\r\n      }\r\n\r\n      // Save the newly created `output` for the next call.\r\n      values = output\r\n\r\n      // Next or done.\r\n      if (fn) {\r\n        wrap(fn, next)(...output)\r\n      } else {\r\n        callback(null, ...output)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @type {Use} */\r\n  function use(middelware) {\r\n    if (typeof middelware !== 'function') {\r\n      throw new TypeError(\r\n        'Expected `middelware` to be a function, not ' + middelware\r\n      )\r\n    }\r\n\r\n    fns.push(middelware)\r\n    return pipeline\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap `middleware`.\r\n * Can be sync or async; return a promise, receive a callback, or return new\r\n * values and errors.\r\n *\r\n * @param {Middleware} middleware\r\n * @param {Callback} callback\r\n */\r\nexport function wrap(middleware, callback) {\r\n  /** @type {boolean} */\r\n  let called\r\n\r\n  return wrapped\r\n\r\n  /**\r\n   * Call `middleware`.\r\n   * @this {any}\r\n   * @param {Array<any>} parameters\r\n   * @returns {void}\r\n   */\r\n  function wrapped(...parameters) {\r\n    const fnExpectsCallback = middleware.length > parameters.length\r\n    /** @type {any} */\r\n    let result\r\n\r\n    if (fnExpectsCallback) {\r\n      parameters.push(done)\r\n    }\r\n\r\n    try {\r\n      result = middleware.apply(this, parameters)\r\n    } catch (error) {\r\n      const exception = /** @type {Error} */ (error)\r\n\r\n      // Well, this is quite the pickle.\r\n      // `middleware` received a callback and called it synchronously, but that\r\n      // threw an error.\r\n      // The only thing left to do is to throw the thing instead.\r\n      if (fnExpectsCallback && called) {\r\n        throw exception\r\n      }\r\n\r\n      return done(exception)\r\n    }\r\n\r\n    if (!fnExpectsCallback) {\r\n      if (result instanceof Promise) {\r\n        result.then(then, done)\r\n      } else if (result instanceof Error) {\r\n        done(result)\r\n      } else {\r\n        then(result)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `callback`, only once.\r\n   * @type {Callback}\r\n   */\r\n  function done(error, ...output) {\r\n    if (!called) {\r\n      called = true\r\n      callback(error, ...output)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call `done` with one value.\r\n   *\r\n   * @param {any} [value]\r\n   */\r\n  function then(value) {\r\n    done(null, value)\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAMA,CAAA,EAAG;EACvB;EACA,IAAMC,GAAG,GAAG,EAAE;EACd;EACA,IAAMC,QAAQ,GAAG;IAACC,GAAG,EAAHA,GAAG;IAAEC,GAAG,EAAHA;EAAG,CAAC;EAE3B,OAAOF,QAAQ;;EAEf;EACA,SAASC,GAAGA,CAAA,EAAY;IAAA,SAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAARC,MAAM,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAANF,MAAM,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACpB,IAAIC,eAAe,GAAG,CAAC,CAAC;IACxB;IACA,IAAMC,QAAQ,GAAGJ,MAAM,CAACK,GAAG,CAAC,CAAC;IAE7B,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;MAClC,MAAM,IAAIE,SAAS,CAAC,0CAA0C,GAAGF,QAAQ,CAAC;IAC5E;IAEAG,IAAI,CAAAC,KAAA,UAAC,IAAI,EAAAC,MAAA,CAAAC,kBAAA,CAAKV,MAAM,GAAC;;IAErB;AACJ;AACA;AACA;AACA;AACA;IACI,SAASO,IAAIA,CAACI,KAAK,EAAa;MAC9B,IAAMC,EAAE,GAAGnB,GAAG,CAAC,EAAEU,eAAe,CAAC;MACjC,IAAIU,KAAK,GAAG,CAAC,CAAC;MAEd,IAAIF,KAAK,EAAE;QACTP,QAAQ,CAACO,KAAK,CAAC;QACf;MACF;;MAEA;MAAA,SAAAG,KAAA,GAAAhB,SAAA,CAAAC,MAAA,EATsBgB,MAAM,OAAAd,KAAA,CAAAa,KAAA,OAAAA,KAAA,WAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;QAAND,MAAM,CAAAC,KAAA,QAAAlB,SAAA,CAAAkB,KAAA;MAAA;MAU5B,OAAO,EAAEH,KAAK,GAAGb,MAAM,CAACD,MAAM,EAAE;QAC9B,IAAIgB,MAAM,CAACF,KAAK,CAAC,KAAK,IAAI,IAAIE,MAAM,CAACF,KAAK,CAAC,KAAKI,SAAS,EAAE;UACzDF,MAAM,CAACF,KAAK,CAAC,GAAGb,MAAM,CAACa,KAAK,CAAC;QAC/B;MACF;;MAEA;MACAb,MAAM,GAAGe,MAAM;;MAEf;MACA,IAAIH,EAAE,EAAE;QACNM,IAAI,CAACN,EAAE,EAAEL,IAAI,CAAC,CAAAC,KAAA,SAAIO,MAAM,CAAC;MAC3B,CAAC,MAAM;QACLX,QAAQ,CAAAI,KAAA,UAAC,IAAI,EAAAC,MAAA,CAAKM,MAAM,EAAC;MAC3B;IACF;EACF;;EAEA;EACA,SAASnB,GAAGA,CAACuB,UAAU,EAAE;IACvB,IAAI,OAAOA,UAAU,KAAK,UAAU,EAAE;MACpC,MAAM,IAAIb,SAAS,CACjB,8CAA8C,GAAGa,UACnD,CAAC;IACH;IAEA1B,GAAG,CAAC2B,IAAI,CAACD,UAAU,CAAC;IACpB,OAAOzB,QAAQ;EACjB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASwB,IAAIA,CAACG,UAAU,EAAEjB,QAAQ,EAAE;EACzC;EACA,IAAIkB,MAAM;EAEV,OAAOC,OAAO;;EAEd;AACF;AACA;AACA;AACA;AACA;EACE,SAASA,OAAOA,CAAA,EAAgB;IAAA,SAAAC,KAAA,GAAA1B,SAAA,CAAAC,MAAA,EAAZ0B,UAAU,OAAAxB,KAAA,CAAAuB,KAAA,GAAAE,KAAA,MAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA;MAAVD,UAAU,CAAAC,KAAA,IAAA5B,SAAA,CAAA4B,KAAA;IAAA;IAC5B,IAAMC,iBAAiB,GAAGN,UAAU,CAACtB,MAAM,GAAG0B,UAAU,CAAC1B,MAAM;IAC/D;IACA,IAAI6B,MAAM;IAEV,IAAID,iBAAiB,EAAE;MACrBF,UAAU,CAACL,IAAI,CAACS,IAAI,CAAC;IACvB;IAEA,IAAI;MACFD,MAAM,GAAGP,UAAU,CAACb,KAAK,CAAC,IAAI,EAAEiB,UAAU,CAAC;IAC7C,CAAC,CAAC,OAAOd,KAAK,EAAE;MACd,IAAMmB,SAAS,GAAG,oBAAsBnB,KAAM;;MAE9C;MACA;MACA;MACA;MACA,IAAIgB,iBAAiB,IAAIL,MAAM,EAAE;QAC/B,MAAMQ,SAAS;MACjB;MAEA,OAAOD,IAAI,CAACC,SAAS,CAAC;IACxB;IAEA,IAAI,CAACH,iBAAiB,EAAE;MACtB,IAAIC,MAAM,YAAYG,OAAO,EAAE;QAC7BH,MAAM,CAACI,IAAI,CAACA,IAAI,EAAEH,IAAI,CAAC;MACzB,CAAC,MAAM,IAAID,MAAM,YAAYK,KAAK,EAAE;QAClCJ,IAAI,CAACD,MAAM,CAAC;MACd,CAAC,MAAM;QACLI,IAAI,CAACJ,MAAM,CAAC;MACd;IACF;EACF;;EAEA;AACF;AACA;AACA;EACE,SAASC,IAAIA,CAAClB,KAAK,EAAa;IAC9B,IAAI,CAACW,MAAM,EAAE;MACXA,MAAM,GAAG,IAAI;MAAA,SAAAY,KAAA,GAAApC,SAAA,CAAAC,MAAA,EAFOgB,MAAM,OAAAd,KAAA,CAAAiC,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAANpB,MAAM,CAAAoB,KAAA,QAAArC,SAAA,CAAAqC,KAAA;MAAA;MAG1B/B,QAAQ,CAAAI,KAAA,UAACG,KAAK,EAAAF,MAAA,CAAKM,MAAM,EAAC;IAC5B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,SAASiB,IAAIA,CAACI,KAAK,EAAE;IACnBP,IAAI,CAAC,IAAI,EAAEO,KAAK,CAAC;EACnB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}