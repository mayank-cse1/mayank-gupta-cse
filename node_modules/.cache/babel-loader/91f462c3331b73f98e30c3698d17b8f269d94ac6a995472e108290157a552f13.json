{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayan\\\\OneDrive\\\\Desktop\\\\mayank-cse.github.io-main\\\\src\\\\components\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"YOUR_GEMINI_API_KEY\"; // Replace with your actual API key\nconst GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;\nconst ChatContainer = styled.div`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  z-index: 1000;\n`;\n_c = ChatContainer;\nconst ChatButton = styled.button`\n  background: #007bff;\n  color: white;\n  border: none;\n  padding: 12px;\n  font-size: 20px;\n  border-radius: 50%;\n  cursor: pointer;\n  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);\n`;\n_c2 = ChatButton;\nconst ChatWindow = styled.div`\n  width: 300px;\n  height: 400px;\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  display: ${props => props.visible ? \"flex\" : \"none\"};\n  flex-direction: column;\n  overflow: hidden;\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n`;\n_c3 = ChatWindow;\nconst ChatHeader = styled.div`\n  background: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n_c4 = ChatHeader;\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  color: white;\n  font-size: 18px;\n  cursor: pointer;\n`;\n_c5 = CloseButton;\nconst ChatBody = styled.div`\n  flex: 1;\n  padding: 10px;\n  overflow-y: auto;\n  font-size: 14px;\n  background: #f9f9f9;\n`;\n_c6 = ChatBody;\nconst ChatInputContainer = styled.div`\n  display: flex;\n  border-top: 1px solid #ddd;\n  padding: 5px;\n  background: #fff;\n`;\n_c7 = ChatInputContainer;\nconst ChatInput = styled.input`\n  flex: 1;\n  padding: 8px;\n  border: none;\n  outline: none;\n`;\n_c8 = ChatInput;\nconst SendButton = styled.button`\n  background: #007bff;\n  color: white;\n  border: none;\n  padding: 8px;\n  cursor: pointer;\n`;\n_c9 = SendButton;\nconst Chatbot = () => {\n  _s();\n  const [visible, setVisible] = useState(false);\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const storedMessages = JSON.parse(localStorage.getItem(\"chatHistory\")) || [];\n    setMessages(storedMessages);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"chatHistory\", JSON.stringify(messages));\n  }, [messages]);\n  const handleSendMessage = async event => {\n    if (event.key === \"Enter\" || event.type === \"click\") {\n      const input = event.target.value || document.getElementById(\"chat-input\").value;\n      if (!input.trim()) return;\n      const userMessage = {\n        text: input,\n        sender: \"user\"\n      };\n      setMessages([...messages, userMessage]);\n      const botResponse = await getBotResponse(input);\n      setMessages(prev => [...prev, {\n        text: botResponse,\n        sender: \"bot\"\n      }]);\n      document.getElementById(\"chat-input\").value = \"\";\n    }\n  };\n  const getBotResponse = async input => {\n    try {\n      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n      const response = await fetch(GEMINI_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: input\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      return (data === null || data === void 0 ? void 0 : (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || \"I'm not sure, but I'm learning!\";\n    } catch (error) {\n      console.error(\"Error fetching response:\", error);\n      return \"Oops! Something went wrong.\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ChatButton, {\n      onClick: () => setVisible(!visible),\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      visible: visible,\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: () => setVisible(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatBody, {\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: msg.sender === \"user\" ? \"right\" : \"left\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              margin: \"5px 0\",\n              padding: \"5px\",\n              background: msg.sender === \"user\" ? \"#007bff\" : \"#ddd\",\n              color: msg.sender === \"user\" ? \"white\" : \"black\",\n              borderRadius: \"5px\",\n              display: \"inline-block\"\n            },\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ChatInput, {\n          id: \"chat-input\",\n          type: \"text\",\n          placeholder: \"Type a message...\",\n          onKeyPress: handleSendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SendButton, {\n          onClick: handleSendMessage,\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"4qNg1R3gVeQxofx/EI2gXhnr698=\");\n_c10 = Chatbot;\nexport default Chatbot;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c, \"ChatContainer\");\n$RefreshReg$(_c2, \"ChatButton\");\n$RefreshReg$(_c3, \"ChatWindow\");\n$RefreshReg$(_c4, \"ChatHeader\");\n$RefreshReg$(_c5, \"CloseButton\");\n$RefreshReg$(_c6, \"ChatBody\");\n$RefreshReg$(_c7, \"ChatInputContainer\");\n$RefreshReg$(_c8, \"ChatInput\");\n$RefreshReg$(_c9, \"SendButton\");\n$RefreshReg$(_c10, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","API_KEY","GEMINI_API_URL","ChatContainer","div","_c","ChatButton","button","_c2","ChatWindow","props","visible","_c3","ChatHeader","_c4","CloseButton","_c5","ChatBody","_c6","ChatInputContainer","_c7","ChatInput","input","_c8","SendButton","_c9","Chatbot","_s","setVisible","messages","setMessages","storedMessages","JSON","parse","localStorage","getItem","setItem","stringify","handleSendMessage","event","key","type","target","value","document","getElementById","trim","userMessage","text","sender","botResponse","getBotResponse","prev","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","response","fetch","method","headers","body","contents","parts","data","json","candidates","content","error","console","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","style","textAlign","margin","padding","background","color","borderRadius","display","id","placeholder","onKeyPress","_c10","$RefreshReg$"],"sources":["C:/Users/mayan/OneDrive/Desktop/mayank-cse.github.io-main/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst API_KEY = \"YOUR_GEMINI_API_KEY\"; // Replace with your actual API key\r\nconst GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;\r\n\r\nconst ChatContainer = styled.div`\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst ChatButton = styled.button`\r\n  background: #007bff;\r\n  color: white;\r\n  border: none;\r\n  padding: 12px;\r\n  font-size: 20px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\nconst ChatWindow = styled.div`\r\n  width: 300px;\r\n  height: 400px;\r\n  background: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\r\n  display: ${(props) => (props.visible ? \"flex\" : \"none\")};\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  position: fixed;\r\n  bottom: 80px;\r\n  right: 20px;\r\n`;\r\n\r\nconst ChatHeader = styled.div`\r\n  background: #007bff;\r\n  color: white;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ChatBody = styled.div`\r\n  flex: 1;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  font-size: 14px;\r\n  background: #f9f9f9;\r\n`;\r\n\r\nconst ChatInputContainer = styled.div`\r\n  display: flex;\r\n  border-top: 1px solid #ddd;\r\n  padding: 5px;\r\n  background: #fff;\r\n`;\r\n\r\nconst ChatInput = styled.input`\r\n  flex: 1;\r\n  padding: 8px;\r\n  border: none;\r\n  outline: none;\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  background: #007bff;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Chatbot = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storedMessages = JSON.parse(localStorage.getItem(\"chatHistory\")) || [];\r\n    setMessages(storedMessages);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"chatHistory\", JSON.stringify(messages));\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (event) => {\r\n    if (event.key === \"Enter\" || event.type === \"click\") {\r\n      const input = event.target.value || document.getElementById(\"chat-input\").value;\r\n      if (!input.trim()) return;\r\n\r\n      const userMessage = { text: input, sender: \"user\" };\r\n      setMessages([...messages, userMessage]);\r\n\r\n      const botResponse = await getBotResponse(input);\r\n      setMessages((prev) => [...prev, { text: botResponse, sender: \"bot\" }]);\r\n\r\n      document.getElementById(\"chat-input\").value = \"\";\r\n    }\r\n  };\r\n\r\n  const getBotResponse = async (input) => {\r\n    try {\r\n      const response = await fetch(GEMINI_API_URL, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [\r\n            {\r\n              parts: [{ text: input }],\r\n            },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      return data?.candidates?.[0]?.content?.parts?.[0]?.text || \"I'm not sure, but I'm learning!\";\r\n    } catch (error) {\r\n      console.error(\"Error fetching response:\", error);\r\n      return \"Oops! Something went wrong.\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContainer>\r\n      <ChatButton onClick={() => setVisible(!visible)}>💬</ChatButton>\r\n      <ChatWindow visible={visible}>\r\n        <ChatHeader>\r\n          <span>Chatbot</span>\r\n          <CloseButton onClick={() => setVisible(false)}>&times;</CloseButton>\r\n        </ChatHeader>\r\n        <ChatBody>\r\n          {messages.map((msg, index) => (\r\n            <div key={index} style={{ textAlign: msg.sender === \"user\" ? \"right\" : \"left\" }}>\r\n              <p\r\n                style={{\r\n                  margin: \"5px 0\",\r\n                  padding: \"5px\",\r\n                  background: msg.sender === \"user\" ? \"#007bff\" : \"#ddd\",\r\n                  color: msg.sender === \"user\" ? \"white\" : \"black\",\r\n                  borderRadius: \"5px\",\r\n                  display: \"inline-block\",\r\n                }}\r\n              >\r\n                {msg.text}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </ChatBody>\r\n        <ChatInputContainer>\r\n          <ChatInput id=\"chat-input\" type=\"text\" placeholder=\"Type a message...\" onKeyPress={handleSendMessage} />\r\n          <SendButton onClick={handleSendMessage}>➤</SendButton>\r\n        </ChatInputContainer>\r\n      </ChatWindow>\r\n    </ChatContainer>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}