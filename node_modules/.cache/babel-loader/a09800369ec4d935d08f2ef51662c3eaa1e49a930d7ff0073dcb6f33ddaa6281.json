{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport var blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit: exit\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  var self = this;\n  return start;\n\n  /**\r\n   * Start of block quote.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    if (code === 62) {\n      var state = self.containerState;\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter('blockQuotePrefix');\n      effects.enter('blockQuoteMarker');\n      effects.consume(code);\n      effects.exit('blockQuoteMarker');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `>`, before optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace');\n      effects.consume(code);\n      effects.exit('blockQuotePrefixWhitespace');\n      effects.exit('blockQuotePrefix');\n      return ok;\n    }\n    effects.exit('blockQuotePrefix');\n    return ok(code);\n  }\n}\n\n/**\r\n * Start of block quote continuation.\r\n *\r\n * ```markdown\r\n *   | > a\r\n * > | > b\r\n *     ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  var self = this;\n  return contStart;\n\n  /**\r\n   * Start of block quote continuation.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, 'linePrefix', self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\r\n   * At `>`, after optional whitespace.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote');\n}","map":{"version":3,"names":["factorySpace","markdownSpace","blockQuote","name","tokenize","tokenizeBlockQuoteStart","continuation","tokenizeBlockQuoteContinuation","exit","effects","ok","nok","self","start","code","state","containerState","open","enter","_container","consume","after","contStart","contBefore","parser","constructs","disable","null","includes","undefined","attempt"],"sources":["C:/Users/mayan/source/repos/mayankcse.github.io/node_modules/micromark-core-commonmark/lib/block-quote.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Exiter} Exiter\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownSpace} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const blockQuote = {\r\n  name: 'blockQuote',\r\n  tokenize: tokenizeBlockQuoteStart,\r\n  continuation: {\r\n    tokenize: tokenizeBlockQuoteContinuation\r\n  },\r\n  exit\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * Start of block quote.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === 62) {\r\n      const state = self.containerState\r\n      if (!state.open) {\r\n        effects.enter('blockQuote', {\r\n          _container: true\r\n        })\r\n        state.open = true\r\n      }\r\n      effects.enter('blockQuotePrefix')\r\n      effects.enter('blockQuoteMarker')\r\n      effects.consume(code)\r\n      effects.exit('blockQuoteMarker')\r\n      return after\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>`, before optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | > a\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.enter('blockQuotePrefixWhitespace')\r\n      effects.consume(code)\r\n      effects.exit('blockQuotePrefixWhitespace')\r\n      effects.exit('blockQuotePrefix')\r\n      return ok\r\n    }\r\n    effects.exit('blockQuotePrefix')\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * Start of block quote continuation.\r\n *\r\n * ```markdown\r\n *   | > a\r\n * > | > b\r\n *     ^\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\r\n  const self = this\r\n  return contStart\r\n\r\n  /**\r\n   * Start of block quote continuation.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contStart(code) {\r\n    if (markdownSpace(code)) {\r\n      // Always populated by defaults.\r\n\r\n      return factorySpace(\r\n        effects,\r\n        contBefore,\r\n        'linePrefix',\r\n        self.parser.constructs.disable.null.includes('codeIndented')\r\n          ? undefined\r\n          : 4\r\n      )(code)\r\n    }\r\n    return contBefore(code)\r\n  }\r\n\r\n  /**\r\n   * At `>`, after optional whitespace.\r\n   *\r\n   * Also used to parse the first block quote opening.\r\n   *\r\n   * ```markdown\r\n   *   | > a\r\n   * > | > b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function contBefore(code) {\r\n    return effects.attempt(blockQuote, ok, nok)(code)\r\n  }\r\n}\r\n\r\n/** @type {Exiter} */\r\nfunction exit(effects) {\r\n  effects.exit('blockQuote')\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,yBAAyB;AACpD,SAAQC,aAAa,QAAO,0BAA0B;AACtD;AACA,OAAO,IAAMC,UAAU,GAAG;EACxBC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAEC,uBAAuB;EACjCC,YAAY,EAAE;IACZF,QAAQ,EAAEG;EACZ,CAAC;EACDC,IAAI,EAAJA;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASH,uBAAuBA,CAACI,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACjD,IAAMC,IAAI,GAAG,IAAI;EACjB,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnB,IAAIA,IAAI,KAAK,EAAE,EAAE;MACf,IAAMC,KAAK,GAAGH,IAAI,CAACI,cAAc;MACjC,IAAI,CAACD,KAAK,CAACE,IAAI,EAAE;QACfR,OAAO,CAACS,KAAK,CAAC,YAAY,EAAE;UAC1BC,UAAU,EAAE;QACd,CAAC,CAAC;QACFJ,KAAK,CAACE,IAAI,GAAG,IAAI;MACnB;MACAR,OAAO,CAACS,KAAK,CAAC,kBAAkB,CAAC;MACjCT,OAAO,CAACS,KAAK,CAAC,kBAAkB,CAAC;MACjCT,OAAO,CAACW,OAAO,CAACN,IAAI,CAAC;MACrBL,OAAO,CAACD,IAAI,CAAC,kBAAkB,CAAC;MAChC,OAAOa,KAAK;IACd;IACA,OAAOV,GAAG,CAACG,IAAI,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASO,KAAKA,CAACP,IAAI,EAAE;IACnB,IAAIb,aAAa,CAACa,IAAI,CAAC,EAAE;MACvBL,OAAO,CAACS,KAAK,CAAC,4BAA4B,CAAC;MAC3CT,OAAO,CAACW,OAAO,CAACN,IAAI,CAAC;MACrBL,OAAO,CAACD,IAAI,CAAC,4BAA4B,CAAC;MAC1CC,OAAO,CAACD,IAAI,CAAC,kBAAkB,CAAC;MAChC,OAAOE,EAAE;IACX;IACAD,OAAO,CAACD,IAAI,CAAC,kBAAkB,CAAC;IAChC,OAAOE,EAAE,CAACI,IAAI,CAAC;EACjB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,8BAA8BA,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACxD,IAAMC,IAAI,GAAG,IAAI;EACjB,OAAOU,SAAS;;EAEhB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,SAASA,CAACR,IAAI,EAAE;IACvB,IAAIb,aAAa,CAACa,IAAI,CAAC,EAAE;MACvB;;MAEA,OAAOd,YAAY,CACjBS,OAAO,EACPc,UAAU,EACV,YAAY,EACZX,IAAI,CAACY,MAAM,CAACC,UAAU,CAACC,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,cAAc,CAAC,GACxDC,SAAS,GACT,CACN,CAAC,CAACf,IAAI,CAAC;IACT;IACA,OAAOS,UAAU,CAACT,IAAI,CAAC;EACzB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASS,UAAUA,CAACT,IAAI,EAAE;IACxB,OAAOL,OAAO,CAACqB,OAAO,CAAC5B,UAAU,EAAEQ,EAAE,EAAEC,GAAG,CAAC,CAACG,IAAI,CAAC;EACnD;AACF;;AAEA;AACA,SAASN,IAAIA,CAACC,OAAO,EAAE;EACrBA,OAAO,CAACD,IAAI,CAAC,YAAY,CAAC;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}