{"ast":null,"code":"/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('mdast-util-to-hast').Options} Options\r\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\r\n *\r\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\r\n */\n\nimport { toHast } from 'mdast-util-to-hast';\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\r\n * Plugin to bridge or mutate to rehype.\r\n *\r\n * If a destination is given, runs the destination with the new hast tree\r\n * (bridge-mode).\r\n * Without destination, returns the hast tree: further plugins run on that tree\r\n * (mutate-mode).\r\n *\r\n * @param destination\r\n *   Optional unified processor.\r\n * @param options\r\n *   Options passed to `mdast-util-to-hast`.\r\n */\nvar remarkRehype = /** @type {(import('unified').Plugin<[Processor, Options?]|[Options]|[], MdastRoot>)} */\n\nfunction remarkRehype(destination, options) {\n  return destination && 'run' in destination ? bridge(destination, options) : mutate(destination);\n};\nexport default remarkRehype;\n\n/**\r\n * Bridge-mode.\r\n * Runs the destination with the new hast tree.\r\n *\r\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\r\n */\nfunction bridge(destination, options) {\n  return function (node, file, next) {\n    destination.run(toHast(node, options), file, function (error) {\n      next(error);\n    });\n  };\n}\n\n/**\r\n * Mutate-mode.\r\n * Further transformers run on the nlcst tree.\r\n *\r\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\r\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned for `toHast`.\n  return function (node) {\n    return toHast(node, options);\n  };\n}","map":{"version":3,"names":["toHast","remarkRehype","destination","options","bridge","mutate","node","file","next","run","error"],"sources":["C:/Users/mayan/source/repos/mayankcse.github.io/node_modules/remark-rehype/index.js"],"sourcesContent":["/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('mdast-util-to-hast').Options} Options\r\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\r\n *\r\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\r\n */\r\n\r\nimport {toHast} from 'mdast-util-to-hast'\r\n\r\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\r\n\r\n/**\r\n * Plugin to bridge or mutate to rehype.\r\n *\r\n * If a destination is given, runs the destination with the new hast tree\r\n * (bridge-mode).\r\n * Without destination, returns the hast tree: further plugins run on that tree\r\n * (mutate-mode).\r\n *\r\n * @param destination\r\n *   Optional unified processor.\r\n * @param options\r\n *   Options passed to `mdast-util-to-hast`.\r\n */\r\nconst remarkRehype =\r\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[Options]|[], MdastRoot>)} */\r\n  (\r\n    function (destination, options) {\r\n      return destination && 'run' in destination\r\n        ? bridge(destination, options)\r\n        : mutate(destination)\r\n    }\r\n  )\r\n\r\nexport default remarkRehype\r\n\r\n/**\r\n * Bridge-mode.\r\n * Runs the destination with the new hast tree.\r\n *\r\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\r\n */\r\nfunction bridge(destination, options) {\r\n  return (node, file, next) => {\r\n    destination.run(toHast(node, options), file, (error) => {\r\n      next(error)\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Mutate-mode.\r\n * Further transformers run on the nlcst tree.\r\n *\r\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\r\n */\r\nfunction mutate(options) {\r\n  // @ts-expect-error: assume a corresponding node is returned for `toHast`.\r\n  return (node) => toHast(node, options)\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,MAAM,QAAO,oBAAoB;;AAEzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,YAAY,GAChB;;AAEE,SAHEA,YAAYA,CAGJC,WAAW,EAAEC,OAAO,EAAE;EAC9B,OAAOD,WAAW,IAAI,KAAK,IAAIA,WAAW,GACtCE,MAAM,CAACF,WAAW,EAAEC,OAAO,CAAC,GAC5BE,MAAM,CAACH,WAAW,CAAC;AACzB,CACD;AAEH,eAAeD,YAAY;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,MAAMA,CAACF,WAAW,EAAEC,OAAO,EAAE;EACpC,OAAO,UAACG,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAK;IAC3BN,WAAW,CAACO,GAAG,CAACT,MAAM,CAACM,IAAI,EAAEH,OAAO,CAAC,EAAEI,IAAI,EAAE,UAACG,KAAK,EAAK;MACtDF,IAAI,CAACE,KAAK,CAAC;IACb,CAAC,CAAC;EACJ,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,MAAMA,CAACF,OAAO,EAAE;EACvB;EACA,OAAO,UAACG,IAAI;IAAA,OAAKN,MAAM,CAACM,IAAI,EAAEH,OAAO,CAAC;EAAA;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}