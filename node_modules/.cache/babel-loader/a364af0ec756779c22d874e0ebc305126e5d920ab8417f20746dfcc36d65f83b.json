{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayan\\\\OneDrive\\\\Desktop\\\\mayank-cse.github.io-main\\\\src\\\\components\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"AIzaSyA19uCjIjOX3Wsjlan6ZT-R9cBi05esgjw\"; // Replace with your actual API key\nconst GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;\nconst SYSTEM_PROMPT = `\nYou are an AI assistant that provides responses only about Mayank Gupta's career. You must strictly answer questions related to his Education, Work Experience, Technical Skills, Projects, and Career Aspirations.\n\nIf a user asks about personal details, non-career topics, or unrelated subjects, politely decline by saying: \n\"I'm here to answer questions about Mayank Gupta's education, experience, and career aspirations. Let me know how I can help!\"\n\nHere’s Mayank Gupta’s professional background:\n\n**Education:**  \n- B.Tech in Computer Science and Engineering (2020-2024) from Vellore Institute of Technology, Chennai.  \n- Higher Secondary (92.60%) from Ahlcon Public School, New Delhi (2018-2020).  \n\n**Experience:**  \n- **Software Development Engineer (SDE) at John Deere** (June 2024 – Present)  \n  - Developed \"DeereVision AI Workspace,\" integrating LLaMA 3.2 and Neo4j & Chroma DB.  \n  - Built modular Python solutions with LangChain, Terraform, Docker, and GitHub Actions on AWS.  \n\n- **SDE Intern at Swiggy** (Sept 2023 – June 2024)  \n  - Developed 7 full-fledged payment dashboards using Elasticsearch & Retool.  \n\n- **SDE Intern at Dewiride Technologies** (July 2022 – Dec 2022)  \n  - Worked on 15+ client-specific projects using Python, C#, and Microsoft Bot Framework.  \n\n- **SDE Intern at LG Electronics** (May 2022 – July 2022)  \n  - Built a Lunch Booking Web App used by 1000+ employees with C# and ASP.NET.  \n\n**Projects:**  \n- **DEV – Virtual Banking Assistant** (Finalist, Bank of Baroda Hackathon)  \n- **Face Track AI** (Finalist, Tamil Nadu Police Hackathon)  \n- **Hunger Free Society** (2nd Prize, IEEE AISYWAL Competition)  \n- **Go-To-Market Merchandiser Bot** (Automated Merchandiser Reporting)  \n\n**Skills:**  \n- **Programming:** Python, C++, Java, C#  \n- **Frameworks:** Ollama, LangChain, FastAPI, Flask, ASP.NET, Django  \n- **Databases:** MySQL, Cosmos DB, Neo4j, ChromaDB, FAISS  \n- **Cloud:** AWS, GCP, Azure  \n\nWhen answering questions, stay concise and professional. If the question is unclear, ask for clarification. If the topic is outside Mayank Gupta’s career scope, politely decline to answer.\n`;\nconst defaultTemplateQuestions = [\"Hi! How can you help me\", \"What knowledge do you have about Mayank\"];\nconst Chatbot = () => {\n  _s();\n  const [visible, setVisible] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [templateQuestions, setTemplateQuestions] = useState(defaultTemplateQuestions);\n  useEffect(() => {\n    const storedMessages = JSON.parse(localStorage.getItem(\"chatHistory\")) || [];\n    setMessages(storedMessages);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"chatHistory\", JSON.stringify(messages));\n  }, [messages]);\n  const isValidPythonString = input => {\n    try {\n      JSON.parse(JSON.stringify(input));\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n  const fetchTemplateQuestions = async input => {\n    if (!isValidPythonString(input)) {\n      setTemplateQuestions(defaultTemplateQuestions);\n      return;\n    }\n    try {\n      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2;\n      const response = await fetch(GEMINI_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `Generate 5 relevant questions based on: ${input}`\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      const questions = (data === null || data === void 0 ? void 0 : (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : _data$candidates$$con2.map(part => part.text)) || defaultTemplateQuestions;\n      setTemplateQuestions(questions);\n    } catch (error) {\n      console.error(\"Error fetching template questions:\", error);\n      setTemplateQuestions(defaultTemplateQuestions);\n    }\n  };\n  const handleSendMessage = async input => {\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages([...messages, userMessage]);\n    fetchTemplateQuestions(input);\n    const botResponse = await getBotResponse(input);\n    setMessages(prev => [...prev, {\n      text: botResponse,\n      sender: \"bot\"\n    }]);\n  };\n  const getBotResponse = async input => {\n    try {\n      var _data$candidates2, _data$candidates2$, _data$candidates2$$co, _data$candidates2$$co2, _data$candidates2$$co3;\n      const response = await fetch(GEMINI_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `${SYSTEM_PROMPT}\\nUser: ${input}\\nAI:`\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      return (data === null || data === void 0 ? void 0 : (_data$candidates2 = data.candidates) === null || _data$candidates2 === void 0 ? void 0 : (_data$candidates2$ = _data$candidates2[0]) === null || _data$candidates2$ === void 0 ? void 0 : (_data$candidates2$$co = _data$candidates2$.content) === null || _data$candidates2$$co === void 0 ? void 0 : (_data$candidates2$$co2 = _data$candidates2$$co.parts) === null || _data$candidates2$$co2 === void 0 ? void 0 : (_data$candidates2$$co3 = _data$candidates2$$co2[0]) === null || _data$candidates2$$co3 === void 0 ? void 0 : _data$candidates2$$co3.text) || \"I'm not sure, but I'm learning!\";\n    } catch (error) {\n      console.error(\"Error fetching response:\", error);\n      return \"Oops! Something went wrong.\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setVisible(!visible),\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), visible && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setVisible(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: msg.sender === \"user\" ? \"right\" : \"left\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              padding: \"5px\",\n              background: msg.sender === \"user\" ? \"#007bff\" : \"#ddd\",\n              color: msg.sender === \"user\" ? \"white\" : \"black\"\n            },\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: templateQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSendMessage(question),\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"chat-input\",\n          type: \"text\",\n          placeholder: \"Type a message...\",\n          onKeyPress: e => e.key === \"Enter\" && handleSendMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSendMessage(document.getElementById(\"chat-input\").value),\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"+DiuB/7s2yjzDuDHTUOBR8jSrIY=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","API_KEY","GEMINI_API_URL","SYSTEM_PROMPT","defaultTemplateQuestions","Chatbot","_s","visible","setVisible","messages","setMessages","templateQuestions","setTemplateQuestions","storedMessages","JSON","parse","localStorage","getItem","setItem","stringify","isValidPythonString","input","error","fetchTemplateQuestions","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","response","fetch","method","headers","body","contents","parts","text","data","json","questions","candidates","content","map","part","console","handleSendMessage","trim","userMessage","sender","botResponse","getBotResponse","prev","_data$candidates2","_data$candidates2$","_data$candidates2$$co","_data$candidates2$$co2","_data$candidates2$$co3","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","msg","index","style","textAlign","padding","background","color","question","id","type","placeholder","onKeyPress","e","key","target","value","document","getElementById","_c","$RefreshReg$"],"sources":["C:/Users/mayan/OneDrive/Desktop/mayank-cse.github.io-main/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst API_KEY = \"AIzaSyA19uCjIjOX3Wsjlan6ZT-R9cBi05esgjw\"; // Replace with your actual API key\r\nconst GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;\r\nconst SYSTEM_PROMPT = `\r\nYou are an AI assistant that provides responses only about Mayank Gupta's career. You must strictly answer questions related to his Education, Work Experience, Technical Skills, Projects, and Career Aspirations.\r\n\r\nIf a user asks about personal details, non-career topics, or unrelated subjects, politely decline by saying: \r\n\"I'm here to answer questions about Mayank Gupta's education, experience, and career aspirations. Let me know how I can help!\"\r\n\r\nHere’s Mayank Gupta’s professional background:\r\n\r\n**Education:**  \r\n- B.Tech in Computer Science and Engineering (2020-2024) from Vellore Institute of Technology, Chennai.  \r\n- Higher Secondary (92.60%) from Ahlcon Public School, New Delhi (2018-2020).  \r\n\r\n**Experience:**  \r\n- **Software Development Engineer (SDE) at John Deere** (June 2024 – Present)  \r\n  - Developed \"DeereVision AI Workspace,\" integrating LLaMA 3.2 and Neo4j & Chroma DB.  \r\n  - Built modular Python solutions with LangChain, Terraform, Docker, and GitHub Actions on AWS.  \r\n\r\n- **SDE Intern at Swiggy** (Sept 2023 – June 2024)  \r\n  - Developed 7 full-fledged payment dashboards using Elasticsearch & Retool.  \r\n\r\n- **SDE Intern at Dewiride Technologies** (July 2022 – Dec 2022)  \r\n  - Worked on 15+ client-specific projects using Python, C#, and Microsoft Bot Framework.  \r\n\r\n- **SDE Intern at LG Electronics** (May 2022 – July 2022)  \r\n  - Built a Lunch Booking Web App used by 1000+ employees with C# and ASP.NET.  \r\n\r\n**Projects:**  \r\n- **DEV – Virtual Banking Assistant** (Finalist, Bank of Baroda Hackathon)  \r\n- **Face Track AI** (Finalist, Tamil Nadu Police Hackathon)  \r\n- **Hunger Free Society** (2nd Prize, IEEE AISYWAL Competition)  \r\n- **Go-To-Market Merchandiser Bot** (Automated Merchandiser Reporting)  \r\n\r\n**Skills:**  \r\n- **Programming:** Python, C++, Java, C#  \r\n- **Frameworks:** Ollama, LangChain, FastAPI, Flask, ASP.NET, Django  \r\n- **Databases:** MySQL, Cosmos DB, Neo4j, ChromaDB, FAISS  \r\n- **Cloud:** AWS, GCP, Azure  \r\n\r\nWhen answering questions, stay concise and professional. If the question is unclear, ask for clarification. If the topic is outside Mayank Gupta’s career scope, politely decline to answer.\r\n`;\r\n\r\n\r\n\r\nconst defaultTemplateQuestions = [\r\n  \"Hi! How can you help me\",\r\n  \"What knowledge do you have about Mayank\"\r\n];\r\n\r\nconst Chatbot = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [templateQuestions, setTemplateQuestions] = useState(defaultTemplateQuestions);\r\n\r\n  useEffect(() => {\r\n    const storedMessages = JSON.parse(localStorage.getItem(\"chatHistory\")) || [];\r\n    setMessages(storedMessages);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"chatHistory\", JSON.stringify(messages));\r\n  }, [messages]);\r\n\r\n  const isValidPythonString = (input) => {\r\n    try {\r\n      JSON.parse(JSON.stringify(input));\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchTemplateQuestions = async (input) => {\r\n    if (!isValidPythonString(input)) {\r\n      setTemplateQuestions(defaultTemplateQuestions);\r\n      return;\r\n    }\r\n    try {\r\n      const response = await fetch(GEMINI_API_URL, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          contents: [{ parts: [{ text: `Generate 5 relevant questions based on: ${input}` }] }],\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      const questions = data?.candidates?.[0]?.content?.parts?.map(part => part.text) || defaultTemplateQuestions;\r\n      setTemplateQuestions(questions);\r\n    } catch (error) {\r\n      console.error(\"Error fetching template questions:\", error);\r\n      setTemplateQuestions(defaultTemplateQuestions);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (input) => {\r\n    if (!input.trim()) return;\r\n    const userMessage = { text: input, sender: \"user\" };\r\n    setMessages([...messages, userMessage]);\r\n    fetchTemplateQuestions(input);\r\n\r\n    const botResponse = await getBotResponse(input);\r\n    setMessages((prev) => [...prev, { text: botResponse, sender: \"bot\" }]);\r\n  };\r\n\r\n  const getBotResponse = async (input) => {\r\n    try {\r\n      const response = await fetch(GEMINI_API_URL, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          contents: [{ parts: [{ text: `${SYSTEM_PROMPT}\\nUser: ${input}\\nAI:` }] }],\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      return data?.candidates?.[0]?.content?.parts?.[0]?.text || \"I'm not sure, but I'm learning!\";\r\n    } catch (error) {\r\n      console.error(\"Error fetching response:\", error);\r\n      return \"Oops! Something went wrong.\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setVisible(!visible)}>💬</button>\r\n      {visible && (\r\n        <div>\r\n          <div>\r\n            <span>Chatbot</span>\r\n            <button onClick={() => setVisible(false)}>&times;</button>\r\n          </div>\r\n          <div>\r\n            {messages.map((msg, index) => (\r\n              <div key={index} style={{ textAlign: msg.sender === \"user\" ? \"right\" : \"left\" }}>\r\n                <p style={{ padding: \"5px\", background: msg.sender === \"user\" ? \"#007bff\" : \"#ddd\", color: msg.sender === \"user\" ? \"white\" : \"black\" }}>{msg.text}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            {templateQuestions.map((question, index) => (\r\n              <button key={index} onClick={() => handleSendMessage(question)}>{question}</button>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            <input id=\"chat-input\" type=\"text\" placeholder=\"Type a message...\" onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage(e.target.value)} />\r\n            <button onClick={() => handleSendMessage(document.getElementById(\"chat-input\").value)}>➤</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}