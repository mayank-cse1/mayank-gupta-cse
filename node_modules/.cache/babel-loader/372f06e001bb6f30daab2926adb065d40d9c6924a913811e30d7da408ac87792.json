{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\n/**\r\n * @typedef {[Construct, ContainerState]} StackItem\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport var document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nvar containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\nfunction initializeDocument(effects) {\n  var self = this;\n  /** @type {Array<StackItem>} */\n  var stack = [];\n  var continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  var childFlow;\n  /** @type {Token | undefined} */\n  var childToken;\n  /** @type {number} */\n  var lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      var item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      var indexBeforeExits = self.events.length;\n      var indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      var point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      var index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit('chunkFlow'));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\r\n   * @param {Token} token\r\n   * @param {boolean | undefined} [eof]\r\n   * @returns {void}\r\n   */\n  function writeToChild(token, eof) {\n    var stream = self.sliceStream(token);\n    if (eof) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      var index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      var indexBeforeExits = self.events.length;\n      var indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      var seen;\n      /** @type {Point | undefined} */\n      var point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === 'chunkFlow') {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point);\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\r\n   * @param {number} size\r\n   * @returns {void}\r\n   */\n  function exitContainers(size) {\n    var index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      var entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), 'linePrefix', this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","splice","document","tokenize","initializeDocument","containerConstruct","tokenizeContainer","effects","self","stack","continued","childFlow","childToken","lineStartOffset","start","code","length","item","containerState","attempt","continuation","documentContinue","checkNewContainers","_closeFlow","undefined","closeFlow","indexBeforeExits","events","indexBeforeFlow","point","type","end","exitContainers","index","Object","assign","slice","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","thereIsANewContainer","thereIsNoNewContainer","parser","lazy","now","line","offset","containerContinue","push","consume","flow","enter","contentType","previous","_tokenizer","flowContinue","writeToChild","exit","token","eof","stream","sliceStream","next","defineSkip","write","seen","size","entry","call","ok","nok","constructs","disable","null","includes"],"sources":["C:/Users/mayan/source/repos/mayankcse.github.io/node_modules/micromark/lib/initialize/document.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').Point} Point\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\n/**\r\n * @typedef {[Construct, ContainerState]} StackItem\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\nimport {splice} from 'micromark-util-chunked'\r\n/** @type {InitialConstruct} */\r\nexport const document = {\r\n  tokenize: initializeDocument\r\n}\r\n\r\n/** @type {Construct} */\r\nconst containerConstruct = {\r\n  tokenize: tokenizeContainer\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeDocument(effects) {\r\n  const self = this\r\n  /** @type {Array<StackItem>} */\r\n  const stack = []\r\n  let continued = 0\r\n  /** @type {TokenizeContext | undefined} */\r\n  let childFlow\r\n  /** @type {Token | undefined} */\r\n  let childToken\r\n  /** @type {number} */\r\n  let lineStartOffset\r\n  return start\r\n\r\n  /** @type {State} */\r\n  function start(code) {\r\n    // First we iterate through the open blocks, starting with the root\r\n    // document, and descending through last children down to the last open\r\n    // block.\r\n    // Each block imposes a condition that the line must satisfy if the block is\r\n    // to remain open.\r\n    // For example, a block quote requires a `>` character.\r\n    // A paragraph requires a non-blank line.\r\n    // In this phase we may match all or just some of the open blocks.\r\n    // But we cannot close unmatched blocks yet, because we may have a lazy\r\n    // continuation line.\r\n    if (continued < stack.length) {\r\n      const item = stack[continued]\r\n      self.containerState = item[1]\r\n      return effects.attempt(\r\n        item[0].continuation,\r\n        documentContinue,\r\n        checkNewContainers\r\n      )(code)\r\n    }\r\n\r\n    // Done.\r\n    return checkNewContainers(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinue(code) {\r\n    continued++\r\n\r\n    // Note: this field is called `_closeFlow` but it also closes containers.\r\n    // Perhaps a good idea to rename it but it’s already used in the wild by\r\n    // extensions.\r\n    if (self.containerState._closeFlow) {\r\n      self.containerState._closeFlow = undefined\r\n      if (childFlow) {\r\n        closeFlow()\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when dealing with lazy lines in `writeToChild`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the flow chunk.\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\r\n        ) {\r\n          point = self.events[indexBeforeFlow][1].end\r\n          break\r\n        }\r\n      }\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      let index = indexBeforeExits\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = Object.assign({}, point)\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n      return checkNewContainers(code)\r\n    }\r\n    return start(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function checkNewContainers(code) {\r\n    // Next, after consuming the continuation markers for existing blocks, we\r\n    // look for new block starts (e.g. `>` for a block quote).\r\n    // If we encounter a new block start, we close any blocks unmatched in\r\n    // step 1 before creating the new block as a child of the last matched\r\n    // block.\r\n    if (continued === stack.length) {\r\n      // No need to `check` whether there’s a container, of `exitContainers`\r\n      // would be moot.\r\n      // We can instead immediately `attempt` to parse one.\r\n      if (!childFlow) {\r\n        return documentContinued(code)\r\n      }\r\n\r\n      // If we have concrete content, such as block HTML or fenced code,\r\n      // we can’t have containers “pierce” into them, so we can immediately\r\n      // start.\r\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\r\n        return flowStart(code)\r\n      }\r\n\r\n      // If we do have flow, it could still be a blank line,\r\n      // but we’d be interrupting it w/ a new container if there’s a current\r\n      // construct.\r\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\r\n      // needed in micromark-extension-gfm-table@1.0.6).\r\n      self.interrupt = Boolean(\r\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\r\n      )\r\n    }\r\n\r\n    // Check if there is a new container.\r\n    self.containerState = {}\r\n    return effects.check(\r\n      containerConstruct,\r\n      thereIsANewContainer,\r\n      thereIsNoNewContainer\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsANewContainer(code) {\r\n    if (childFlow) closeFlow()\r\n    exitContainers(continued)\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function thereIsNoNewContainer(code) {\r\n    self.parser.lazy[self.now().line] = continued !== stack.length\r\n    lineStartOffset = self.now().offset\r\n    return flowStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function documentContinued(code) {\r\n    // Try new containers.\r\n    self.containerState = {}\r\n    return effects.attempt(\r\n      containerConstruct,\r\n      containerContinue,\r\n      flowStart\r\n    )(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function containerContinue(code) {\r\n    continued++\r\n    stack.push([self.currentConstruct, self.containerState])\r\n    // Try another.\r\n    return documentContinued(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowStart(code) {\r\n    if (code === null) {\r\n      if (childFlow) closeFlow()\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    childFlow = childFlow || self.parser.flow(self.now())\r\n    effects.enter('chunkFlow', {\r\n      contentType: 'flow',\r\n      previous: childToken,\r\n      _tokenizer: childFlow\r\n    })\r\n    return flowContinue(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function flowContinue(code) {\r\n    if (code === null) {\r\n      writeToChild(effects.exit('chunkFlow'), true)\r\n      exitContainers(0)\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      writeToChild(effects.exit('chunkFlow'))\r\n      // Get ready for the next line.\r\n      continued = 0\r\n      self.interrupt = undefined\r\n      return start\r\n    }\r\n    effects.consume(code)\r\n    return flowContinue\r\n  }\r\n\r\n  /**\r\n   * @param {Token} token\r\n   * @param {boolean | undefined} [eof]\r\n   * @returns {void}\r\n   */\r\n  function writeToChild(token, eof) {\r\n    const stream = self.sliceStream(token)\r\n    if (eof) stream.push(null)\r\n    token.previous = childToken\r\n    if (childToken) childToken.next = token\r\n    childToken = token\r\n    childFlow.defineSkip(token.start)\r\n    childFlow.write(stream)\r\n\r\n    // Alright, so we just added a lazy line:\r\n    //\r\n    // ```markdown\r\n    // > a\r\n    // b.\r\n    //\r\n    // Or:\r\n    //\r\n    // > ~~~c\r\n    // d\r\n    //\r\n    // Or:\r\n    //\r\n    // > | e |\r\n    // f\r\n    // ```\r\n    //\r\n    // The construct in the second example (fenced code) does not accept lazy\r\n    // lines, so it marked itself as done at the end of its first line, and\r\n    // then the content construct parses `d`.\r\n    // Most constructs in markdown match on the first line: if the first line\r\n    // forms a construct, a non-lazy line can’t “unmake” it.\r\n    //\r\n    // The construct in the third example is potentially a GFM table, and\r\n    // those are *weird*.\r\n    // It *could* be a table, from the first line, if the following line\r\n    // matches a condition.\r\n    // In this case, that second line is lazy, which “unmakes” the first line\r\n    // and turns the whole into one content block.\r\n    //\r\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\r\n    // whether the lazy line started a new flow block.\r\n    // If it did, we exit the current containers between the two flow blocks.\r\n    if (self.parser.lazy[token.start.line]) {\r\n      let index = childFlow.events.length\r\n      while (index--) {\r\n        if (\r\n          // The token starts before the line ending…\r\n          childFlow.events[index][1].start.offset < lineStartOffset &&\r\n          // …and either is not ended yet…\r\n          (!childFlow.events[index][1].end ||\r\n            // …or ends after it.\r\n            childFlow.events[index][1].end.offset > lineStartOffset)\r\n        ) {\r\n          // Exit: there’s still something open, which means it’s a lazy line\r\n          // part of something.\r\n          return\r\n        }\r\n      }\r\n\r\n      // Note: this algorithm for moving events around is similar to the\r\n      // algorithm when closing flow in `documentContinue`.\r\n      const indexBeforeExits = self.events.length\r\n      let indexBeforeFlow = indexBeforeExits\r\n      /** @type {boolean | undefined} */\r\n      let seen\r\n      /** @type {Point | undefined} */\r\n      let point\r\n\r\n      // Find the previous chunk (the one before the lazy line).\r\n      while (indexBeforeFlow--) {\r\n        if (\r\n          self.events[indexBeforeFlow][0] === 'exit' &&\r\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\r\n        ) {\r\n          if (seen) {\r\n            point = self.events[indexBeforeFlow][1].end\r\n            break\r\n          }\r\n          seen = true\r\n        }\r\n      }\r\n      exitContainers(continued)\r\n\r\n      // Fix positions.\r\n      index = indexBeforeExits\r\n      while (index < self.events.length) {\r\n        self.events[index][1].end = Object.assign({}, point)\r\n        index++\r\n      }\r\n\r\n      // Inject the exits earlier (they’re still also at the end).\r\n      splice(\r\n        self.events,\r\n        indexBeforeFlow + 1,\r\n        0,\r\n        self.events.slice(indexBeforeExits)\r\n      )\r\n\r\n      // Discard the duplicate exits.\r\n      self.events.length = index\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} size\r\n   * @returns {void}\r\n   */\r\n  function exitContainers(size) {\r\n    let index = stack.length\r\n\r\n    // Exit open containers.\r\n    while (index-- > size) {\r\n      const entry = stack[index]\r\n      self.containerState = entry[1]\r\n      entry[0].exit.call(self, effects)\r\n    }\r\n    stack.length = size\r\n  }\r\n  function closeFlow() {\r\n    childFlow.write([null])\r\n    childToken = undefined\r\n    childFlow = undefined\r\n    self.containerState._closeFlow = undefined\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeContainer(effects, ok, nok) {\r\n  // Always populated by defaults.\r\n\r\n  return factorySpace(\r\n    effects,\r\n    effects.attempt(this.parser.constructs.document, ok, nok),\r\n    'linePrefix',\r\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}