{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\r\n * Parse titles.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * \"a\"\r\n * 'b'\r\n * (c)\r\n * \"a\r\n * b\"\r\n * 'a\r\n *     b'\r\n * (a\\)b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  var marker;\n  return start;\n\n  /**\r\n   * Start of title.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After opening marker.\r\n   *\r\n   * This is also used at the closing marker.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\r\n   * At something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return factorySpace(effects, atBreak, 'linePrefix');\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return inside(code);\n  }\n\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\\*b\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","factoryTitle","effects","ok","nok","type","markerType","stringType","marker","start","code","enter","consume","exit","begin","atBreak","contentType","inside","escape"],"sources":["C:/Users/mayan/source/repos/mayankcse.github.io/node_modules/micromark-factory-title/index.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Effects} Effects\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenType} TokenType\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\n/**\r\n * Parse titles.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * \"a\"\r\n * 'b'\r\n * (c)\r\n * \"a\r\n * b\"\r\n * 'a\r\n *     b'\r\n * (a\\)b)\r\n * ```\r\n *\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\r\n * @param {TokenType} stringType\r\n *   Type for the value (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */ // eslint-disable-next-line max-params\r\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n  return start\r\n\r\n  /**\r\n   * Start of title.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (code === 34 || code === 39 || code === 40) {\r\n      effects.enter(type)\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      marker = code === 40 ? 41 : code\r\n      return begin\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After opening marker.\r\n   *\r\n   * This is also used at the closing marker.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function begin(code) {\r\n    if (code === marker) {\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n    effects.enter(stringType)\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * At something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.exit(stringType)\r\n      return begin(marker)\r\n    }\r\n    if (code === null) {\r\n      return nok(code)\r\n    }\r\n\r\n    // Note: blank lines can’t exist in content.\r\n    if (markdownLineEnding(code)) {\r\n      // To do: use `space_or_tab_eol_with_options`, connect.\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return factorySpace(effects, atBreak, 'linePrefix')\r\n    }\r\n    effects.enter('chunkString', {\r\n      contentType: 'string'\r\n    })\r\n    return inside(code)\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @type {State}\r\n   */\r\n  function inside(code) {\r\n    if (code === marker || code === null || markdownLineEnding(code)) {\r\n      effects.exit('chunkString')\r\n      return atBreak(code)\r\n    }\r\n    effects.consume(code)\r\n    return code === 92 ? escape : inside\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | \"a\\*b\"\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function escape(code) {\r\n    if (code === marker || code === 92) {\r\n      effects.consume(code)\r\n      return inside\r\n    }\r\n    return inside(code)\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}