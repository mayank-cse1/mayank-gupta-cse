{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport var characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  var self = this;\n  var size = 0;\n  /** @type {number} */\n  var max;\n  /** @type {(code: Code) => boolean} */\n  var test;\n  return start;\n\n  /**\r\n   * Start of character reference.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *      ^\r\n   * > | a&#123;b\r\n   *      ^\r\n   * > | a&#x9;b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    effects.enter('characterReference');\n    effects.enter('characterReferenceMarker');\n    effects.consume(code);\n    effects.exit('characterReferenceMarker');\n    return open;\n  }\n\n  /**\r\n   * After `&`, at `#` for numeric references or alphanumeric for named\r\n   * references.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^\r\n   * > | a&#123;b\r\n   *       ^\r\n   * > | a&#x9;b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerNumeric');\n      return numeric;\n    }\n    effects.enter('characterReferenceValue');\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\r\n   * After `#`, at `x` for hexadecimals or digit for decimals.\r\n   *\r\n   * ```markdown\r\n   * > | a&#123;b\r\n   *        ^\r\n   * > | a&#x9;b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal');\n      effects.consume(code);\n      effects.exit('characterReferenceMarkerHexadecimal');\n      effects.enter('characterReferenceValue');\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter('characterReferenceValue');\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\r\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\r\n   *\r\n   * The character reference kind defines what and how many characters are\r\n   * allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^^^\r\n   * > | a&#123;b\r\n   *        ^^^\r\n   * > | a&#x9;b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      var token = effects.exit('characterReferenceValue');\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker');\n      effects.consume(code);\n      effects.exit('characterReferenceMarker');\n      effects.exit('characterReference');\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","map":{"version":3,"names":["decodeNamedCharacterReference","asciiAlphanumeric","asciiDigit","asciiHexDigit","characterReference","name","tokenize","tokenizeCharacterReference","effects","ok","nok","self","size","max","test","start","code","enter","consume","exit","open","numeric","value","token","sliceSerialize"],"sources":["C:/mayankcse.github.io/node_modules/micromark-core-commonmark/lib/character-reference.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\r\nimport {\r\n  asciiAlphanumeric,\r\n  asciiDigit,\r\n  asciiHexDigit\r\n} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const characterReference = {\r\n  name: 'characterReference',\r\n  tokenize: tokenizeCharacterReference\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeCharacterReference(effects, ok, nok) {\r\n  const self = this\r\n  let size = 0\r\n  /** @type {number} */\r\n  let max\r\n  /** @type {(code: Code) => boolean} */\r\n  let test\r\n  return start\r\n\r\n  /**\r\n   * Start of character reference.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *      ^\r\n   * > | a&#123;b\r\n   *      ^\r\n   * > | a&#x9;b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('characterReference')\r\n    effects.enter('characterReferenceMarker')\r\n    effects.consume(code)\r\n    effects.exit('characterReferenceMarker')\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `&`, at `#` for numeric references or alphanumeric for named\r\n   * references.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^\r\n   * > | a&#123;b\r\n   *       ^\r\n   * > | a&#x9;b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 35) {\r\n      effects.enter('characterReferenceMarkerNumeric')\r\n      effects.consume(code)\r\n      effects.exit('characterReferenceMarkerNumeric')\r\n      return numeric\r\n    }\r\n    effects.enter('characterReferenceValue')\r\n    max = 31\r\n    test = asciiAlphanumeric\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After `#`, at `x` for hexadecimals or digit for decimals.\r\n   *\r\n   * ```markdown\r\n   * > | a&#123;b\r\n   *        ^\r\n   * > | a&#x9;b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function numeric(code) {\r\n    if (code === 88 || code === 120) {\r\n      effects.enter('characterReferenceMarkerHexadecimal')\r\n      effects.consume(code)\r\n      effects.exit('characterReferenceMarkerHexadecimal')\r\n      effects.enter('characterReferenceValue')\r\n      max = 6\r\n      test = asciiHexDigit\r\n      return value\r\n    }\r\n    effects.enter('characterReferenceValue')\r\n    max = 7\r\n    test = asciiDigit\r\n    return value(code)\r\n  }\r\n\r\n  /**\r\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\r\n   *\r\n   * The character reference kind defines what and how many characters are\r\n   * allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a&amp;b\r\n   *       ^^^\r\n   * > | a&#123;b\r\n   *        ^^^\r\n   * > | a&#x9;b\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function value(code) {\r\n    if (code === 59 && size) {\r\n      const token = effects.exit('characterReferenceValue')\r\n      if (\r\n        test === asciiAlphanumeric &&\r\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\r\n      ) {\r\n        return nok(code)\r\n      }\r\n\r\n      // To do: `markdown-rs` uses a different name:\r\n      // `CharacterReferenceMarkerSemi`.\r\n      effects.enter('characterReferenceMarker')\r\n      effects.consume(code)\r\n      effects.exit('characterReferenceMarker')\r\n      effects.exit('characterReference')\r\n      return ok\r\n    }\r\n    if (test(code) && size++ < max) {\r\n      effects.consume(code)\r\n      return value\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,6BAA6B,QAAO,kCAAkC;AAC9E,SACEC,iBAAiB,EACjBC,UAAU,EACVC,aAAa,QACR,0BAA0B;AACjC;AACA,OAAO,IAAMC,kBAAkB,GAAG;EAChCC,IAAI,EAAE,oBAAoB;EAC1BC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASA,0BAA0BA,CAACC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACpD,IAAMC,IAAI,GAAG,IAAI;EACjB,IAAIC,IAAI,GAAG,CAAC;EACZ;EACA,IAAIC,GAAG;EACP;EACA,IAAIC,IAAI;EACR,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBR,OAAO,CAACS,KAAK,CAAC,oBAAoB,CAAC;IACnCT,OAAO,CAACS,KAAK,CAAC,0BAA0B,CAAC;IACzCT,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;IACrBR,OAAO,CAACW,IAAI,CAAC,0BAA0B,CAAC;IACxC,OAAOC,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,IAAIA,CAACJ,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAK,EAAE,EAAE;MACfR,OAAO,CAACS,KAAK,CAAC,iCAAiC,CAAC;MAChDT,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrBR,OAAO,CAACW,IAAI,CAAC,iCAAiC,CAAC;MAC/C,OAAOE,OAAO;IAChB;IACAb,OAAO,CAACS,KAAK,CAAC,yBAAyB,CAAC;IACxCJ,GAAG,GAAG,EAAE;IACRC,IAAI,GAAGb,iBAAiB;IACxB,OAAOqB,KAAK,CAACN,IAAI,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASK,OAAOA,CAACL,IAAI,EAAE;IACrB,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,GAAG,EAAE;MAC/BR,OAAO,CAACS,KAAK,CAAC,qCAAqC,CAAC;MACpDT,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrBR,OAAO,CAACW,IAAI,CAAC,qCAAqC,CAAC;MACnDX,OAAO,CAACS,KAAK,CAAC,yBAAyB,CAAC;MACxCJ,GAAG,GAAG,CAAC;MACPC,IAAI,GAAGX,aAAa;MACpB,OAAOmB,KAAK;IACd;IACAd,OAAO,CAACS,KAAK,CAAC,yBAAyB,CAAC;IACxCJ,GAAG,GAAG,CAAC;IACPC,IAAI,GAAGZ,UAAU;IACjB,OAAOoB,KAAK,CAACN,IAAI,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASM,KAAKA,CAACN,IAAI,EAAE;IACnB,IAAIA,IAAI,KAAK,EAAE,IAAIJ,IAAI,EAAE;MACvB,IAAMW,KAAK,GAAGf,OAAO,CAACW,IAAI,CAAC,yBAAyB,CAAC;MACrD,IACEL,IAAI,KAAKb,iBAAiB,IAC1B,CAACD,6BAA6B,CAACW,IAAI,CAACa,cAAc,CAACD,KAAK,CAAC,CAAC,EAC1D;QACA,OAAOb,GAAG,CAACM,IAAI,CAAC;MAClB;;MAEA;MACA;MACAR,OAAO,CAACS,KAAK,CAAC,0BAA0B,CAAC;MACzCT,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrBR,OAAO,CAACW,IAAI,CAAC,0BAA0B,CAAC;MACxCX,OAAO,CAACW,IAAI,CAAC,oBAAoB,CAAC;MAClC,OAAOV,EAAE;IACX;IACA,IAAIK,IAAI,CAACE,IAAI,CAAC,IAAIJ,IAAI,EAAE,GAAGC,GAAG,EAAE;MAC9BL,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrB,OAAOM,KAAK;IACd;IACA,OAAOZ,GAAG,CAACM,IAAI,CAAC;EAClB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}