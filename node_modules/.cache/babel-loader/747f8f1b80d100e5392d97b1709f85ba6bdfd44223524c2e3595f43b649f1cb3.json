{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport var autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  var size = 0;\n  return start;\n\n  /**\r\n   * Start of an autolink.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *      ^\r\n   * > | a<user@example.com>b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    effects.enter('autolink');\n    effects.enter('autolinkMarker');\n    effects.consume(code);\n    effects.exit('autolinkMarker');\n    effects.enter('autolinkProtocol');\n    return open;\n  }\n\n  /**\r\n   * After `<`, at protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *       ^\r\n   * > | a<user@example.com>b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    return emailAtext(code);\n  }\n\n  /**\r\n   * At second byte of protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\r\n   * In ambiguous protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\r\n   * After protocol, in URL.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol');\n      effects.enter('autolinkMarker');\n      effects.consume(code);\n      effects.exit('autolinkMarker');\n      effects.exit('autolink');\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\r\n   * In email atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In label, after at-sign or dot.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                 ^       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\r\n   * In label, where `.` and `>` are allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail';\n      effects.enter('autolinkMarker');\n      effects.consume(code);\n      effects.exit('autolinkMarker');\n      effects.exit('autolink');\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\r\n   * In label, where `.` and `>` are *not* allowed.\r\n   *\r\n   * Though, this is also used in `emailLabel` to parse other values.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@ex-ample.com>b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      var next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","map":{"version":3,"names":["asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","autolink","name","tokenize","tokenizeAutolink","effects","ok","nok","size","start","code","enter","consume","exit","open","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","type","emailValue","next"],"sources":["C:/mayankcse.github.io/node_modules/micromark-core-commonmark/lib/autolink.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  asciiAtext,\r\n  asciiControl\r\n} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const autolink = {\r\n  name: 'autolink',\r\n  tokenize: tokenizeAutolink\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeAutolink(effects, ok, nok) {\r\n  let size = 0\r\n  return start\r\n\r\n  /**\r\n   * Start of an autolink.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *      ^\r\n   * > | a<user@example.com>b\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('autolink')\r\n    effects.enter('autolinkMarker')\r\n    effects.consume(code)\r\n    effects.exit('autolinkMarker')\r\n    effects.enter('autolinkProtocol')\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *       ^\r\n   * > | a<user@example.com>b\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return schemeOrEmailAtext\r\n    }\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * At second byte of protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeOrEmailAtext(code) {\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\r\n      // Count the previous alphabetical from `open` too.\r\n      size = 1\r\n      return schemeInsideOrEmailAtext(code)\r\n    }\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * In ambiguous protocol or atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *        ^\r\n   * > | a<user@example.com>b\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function schemeInsideOrEmailAtext(code) {\r\n    if (code === 58) {\r\n      effects.consume(code)\r\n      size = 0\r\n      return urlInside\r\n    }\r\n\r\n    // ASCII alphanumeric and `+`, `-`, and `.`.\r\n    if (\r\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\r\n      size++ < 32\r\n    ) {\r\n      effects.consume(code)\r\n      return schemeInsideOrEmailAtext\r\n    }\r\n    size = 0\r\n    return emailAtext(code)\r\n  }\r\n\r\n  /**\r\n   * After protocol, in URL.\r\n   *\r\n   * ```markdown\r\n   * > | a<https://example.com>b\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function urlInside(code) {\r\n    if (code === 62) {\r\n      effects.exit('autolinkProtocol')\r\n      effects.enter('autolinkMarker')\r\n      effects.consume(code)\r\n      effects.exit('autolinkMarker')\r\n      effects.exit('autolink')\r\n      return ok\r\n    }\r\n\r\n    // ASCII control, space, or `<`.\r\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\r\n      return nok(code)\r\n    }\r\n    effects.consume(code)\r\n    return urlInside\r\n  }\r\n\r\n  /**\r\n   * In email atext.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *              ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtext(code) {\r\n    if (code === 64) {\r\n      effects.consume(code)\r\n      return emailAtSignOrDot\r\n    }\r\n    if (asciiAtext(code)) {\r\n      effects.consume(code)\r\n      return emailAtext\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In label, after at-sign or dot.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                 ^       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailAtSignOrDot(code) {\r\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are allowed.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@example.com>b\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailLabel(code) {\r\n    if (code === 46) {\r\n      effects.consume(code)\r\n      size = 0\r\n      return emailAtSignOrDot\r\n    }\r\n    if (code === 62) {\r\n      // Exit, then change the token type.\r\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\r\n      effects.enter('autolinkMarker')\r\n      effects.consume(code)\r\n      effects.exit('autolinkMarker')\r\n      effects.exit('autolink')\r\n      return ok\r\n    }\r\n    return emailValue(code)\r\n  }\r\n\r\n  /**\r\n   * In label, where `.` and `>` are *not* allowed.\r\n   *\r\n   * Though, this is also used in `emailLabel` to parse other values.\r\n   *\r\n   * ```markdown\r\n   * > | a<user.name@ex-ample.com>b\r\n   *                    ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function emailValue(code) {\r\n    // ASCII alphanumeric or `-`.\r\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\r\n      const next = code === 45 ? emailValue : emailLabel\r\n      effects.consume(code)\r\n      return next\r\n    }\r\n    return nok(code)\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}