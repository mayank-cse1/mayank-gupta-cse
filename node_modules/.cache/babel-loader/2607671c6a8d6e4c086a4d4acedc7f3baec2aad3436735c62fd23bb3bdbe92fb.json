{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport var content = {\n  tokenize: initializeContent\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\nfunction initializeContent(effects) {\n  var contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  var previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return factorySpace(effects, contentStart, 'linePrefix');\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph');\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    var token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous: previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText');\n      effects.exit('paragraph');\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit('chunkText');\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","content","tokenize","initializeContent","effects","contentStart","attempt","parser","constructs","contentInitial","afterContentStartConstruct","paragraphInitial","previous","code","consume","enter","exit","lineStart","token","contentType","next","data"],"sources":["C:/mayankcse.github.io/node_modules/micromark/lib/initialize/content.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\r\n * @typedef {import('micromark-util-types').Initializer} Initializer\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').Token} Token\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding} from 'micromark-util-character'\r\n/** @type {InitialConstruct} */\r\nexport const content = {\r\n  tokenize: initializeContent\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Initializer}\r\n */\r\nfunction initializeContent(effects) {\r\n  const contentStart = effects.attempt(\r\n    this.parser.constructs.contentInitial,\r\n    afterContentStartConstruct,\r\n    paragraphInitial\r\n  )\r\n  /** @type {Token} */\r\n  let previous\r\n  return contentStart\r\n\r\n  /** @type {State} */\r\n  function afterContentStartConstruct(code) {\r\n    if (code === null) {\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return factorySpace(effects, contentStart, 'linePrefix')\r\n  }\r\n\r\n  /** @type {State} */\r\n  function paragraphInitial(code) {\r\n    effects.enter('paragraph')\r\n    return lineStart(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function lineStart(code) {\r\n    const token = effects.enter('chunkText', {\r\n      contentType: 'text',\r\n      previous\r\n    })\r\n    if (previous) {\r\n      previous.next = token\r\n    }\r\n    previous = token\r\n    return data(code)\r\n  }\r\n\r\n  /** @type {State} */\r\n  function data(code) {\r\n    if (code === null) {\r\n      effects.exit('chunkText')\r\n      effects.exit('paragraph')\r\n      effects.consume(code)\r\n      return\r\n    }\r\n    if (markdownLineEnding(code)) {\r\n      effects.consume(code)\r\n      effects.exit('chunkText')\r\n      return lineStart\r\n    }\r\n\r\n    // Data.\r\n    effects.consume(code)\r\n    return data\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,QAAO,0BAA0B;AAC3D;AACA,OAAO,IAAMC,OAAO,GAAG;EACrBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASA,iBAAiBA,CAACC,OAAO,EAAE;EAClC,IAAMC,YAAY,GAAGD,OAAO,CAACE,OAAO,CAClC,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,cAAc,EACrCC,0BAA0B,EAC1BC,gBACF,CAAC;EACD;EACA,IAAIC,QAAQ;EACZ,OAAOP,YAAY;;EAEnB;EACA,SAASK,0BAA0BA,CAACG,IAAI,EAAE;IACxC,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjBT,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;MACrB;IACF;IACAT,OAAO,CAACW,KAAK,CAAC,YAAY,CAAC;IAC3BX,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;IACrBT,OAAO,CAACY,IAAI,CAAC,YAAY,CAAC;IAC1B,OAAOjB,YAAY,CAACK,OAAO,EAAEC,YAAY,EAAE,YAAY,CAAC;EAC1D;;EAEA;EACA,SAASM,gBAAgBA,CAACE,IAAI,EAAE;IAC9BT,OAAO,CAACW,KAAK,CAAC,WAAW,CAAC;IAC1B,OAAOE,SAAS,CAACJ,IAAI,CAAC;EACxB;;EAEA;EACA,SAASI,SAASA,CAACJ,IAAI,EAAE;IACvB,IAAMK,KAAK,GAAGd,OAAO,CAACW,KAAK,CAAC,WAAW,EAAE;MACvCI,WAAW,EAAE,MAAM;MACnBP,QAAQ,EAARA;IACF,CAAC,CAAC;IACF,IAAIA,QAAQ,EAAE;MACZA,QAAQ,CAACQ,IAAI,GAAGF,KAAK;IACvB;IACAN,QAAQ,GAAGM,KAAK;IAChB,OAAOG,IAAI,CAACR,IAAI,CAAC;EACnB;;EAEA;EACA,SAASQ,IAAIA,CAACR,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjBT,OAAO,CAACY,IAAI,CAAC,WAAW,CAAC;MACzBZ,OAAO,CAACY,IAAI,CAAC,WAAW,CAAC;MACzBZ,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;MACrB;IACF;IACA,IAAIb,kBAAkB,CAACa,IAAI,CAAC,EAAE;MAC5BT,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;MACrBT,OAAO,CAACY,IAAI,CAAC,WAAW,CAAC;MACzB,OAAOC,SAAS;IAClB;;IAEA;IACAb,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;IACrB,OAAOQ,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}