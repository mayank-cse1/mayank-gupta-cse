{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mayan\\\\OneDrive\\\\Desktop\\\\mayank-cse.github.io-main\\\\src\\\\components\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"AIzaSyA19uCjIjOX3Wsjlan6ZT-R9cBi05esgjw\"; // Replace with your actual API key\nconst GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;\nconst SYSTEM_PROMPT = `\nYou are an AI assistant that provides responses only about Mayank Gupta's career. You must strictly answer questions related to his Education, Work Experience, Technical Skills, Projects, and Career Aspirations.\n\nIf a user asks about personal details, non-career topics, or unrelated subjects, politely decline by saying: \n\"I'm here to answer questions about Mayank Gupta's education, experience, and career aspirations. Let me know how I can help!\"\n\nHere’s Mayank Gupta’s professional background:\n\n**Education:**  \n- B.Tech in Computer Science and Engineering (2020-2024) from Vellore Institute of Technology, Chennai.  \n- Higher Secondary (92.60%) from Ahlcon Public School, New Delhi (2018-2020).  \n\n**Experience:**  \n- **Software Development Engineer (SDE) at John Deere** (June 2024 – Present)  \n  - Developed \"DeereVision AI Workspace,\" integrating LLaMA 3.2 and Neo4j & Chroma DB.  \n  - Built modular Python solutions with LangChain, Terraform, Docker, and GitHub Actions on AWS.  \n\n- **SDE Intern at Swiggy** (Sept 2023 – June 2024)  \n  - Developed 7 full-fledged payment dashboards using Elasticsearch & Retool.  \n\n- **SDE Intern at Dewiride Technologies** (July 2022 – Dec 2022)  \n  - Worked on 15+ client-specific projects using Python, C#, and Microsoft Bot Framework.  \n\n- **SDE Intern at LG Electronics** (May 2022 – July 2022)  \n  - Built a Lunch Booking Web App used by 1000+ employees with C# and ASP.NET.  \n\n**Projects:**  \n- **DEV – Virtual Banking Assistant** (Finalist, Bank of Baroda Hackathon)  \n- **Face Track AI** (Finalist, Tamil Nadu Police Hackathon)  \n- **Hunger Free Society** (2nd Prize, IEEE AISYWAL Competition)  \n- **Go-To-Market Merchandiser Bot** (Automated Merchandiser Reporting)  \n\n**Skills:**  \n- **Programming:** Python, C++, Java, C#  \n- **Frameworks:** Ollama, LangChain, FastAPI, Flask, ASP.NET, Django  \n- **Databases:** MySQL, Cosmos DB, Neo4j, ChromaDB, FAISS  \n- **Cloud:** AWS, GCP, Azure  \n\nWhen answering questions, stay concise and professional. If the question is unclear, ask for clarification. If the topic is outside Mayank Gupta’s career scope, politely decline to answer.\n`;\nconst templateQuestions = [\"Hi! How can you help me\", \"What knowledge do you have about Mayank\"];\nconst ChatContainer = styled.div`\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  z-index: 1000;\n`;\n_c = ChatContainer;\nconst ChatButton = styled.button`\n  background: #007bff;\n  color: white;\n  border: none;\n  padding: 12px;\n  font-size: 20px;\n  border-radius: 50%;\n  cursor: pointer;\n  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);\n`;\n_c2 = ChatButton;\nconst ChatWindow = styled.div`\n  width: 300px;\n  height: 400px;\n  background: white;\n  border-radius: 10px;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n  display: ${props => props.visible ? \"flex\" : \"none\"};\n  flex-direction: column;\n  overflow: hidden;\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n`;\n_c3 = ChatWindow;\nconst ChatHeader = styled.div`\n  background: #007bff;\n  color: white;\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n_c4 = ChatHeader;\nconst CloseButton = styled.button`\n  background: none;\n  border: none;\n  color: white;\n  font-size: 18px;\n  cursor: pointer;\n`;\n_c5 = CloseButton;\nconst ChatBody = styled.div`\n  flex: 1;\n  padding: 10px;\n  overflow-y: auto;\n  font-size: 14px;\n  background: #f9f9f9;\n`;\n_c6 = ChatBody;\nconst ChatInputContainer = styled.div`\n  display: flex;\n  border-top: 1px solid #ddd;\n  padding: 5px;\n  background: #fff;\n`;\n_c7 = ChatInputContainer;\nconst ChatInput = styled.input`\n  flex: 1;\n  padding: 8px;\n  border: none;\n  outline: none;\n`;\n_c8 = ChatInput;\nconst SendButton = styled.button`\n  background: #007bff;\n  color: white;\n  border: none;\n  padding: 8px;\n  cursor: pointer;\n`;\n_c9 = SendButton;\nconst TemplateButton = styled.button`\n  background: #ddd;\n  border: none;\n  padding: 8px;\n  margin: 5px;\n  cursor: pointer;\n  border-radius: 5px;\n`;\n_c10 = TemplateButton;\nconst Chatbot = () => {\n  _s();\n  const [visible, setVisible] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [templateQuestions, setTemplateQuestions] = useState([]);\n  useEffect(() => {\n    const storedMessages = JSON.parse(localStorage.getItem(\"chatHistory\")) || [];\n    setMessages(storedMessages);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"chatHistory\", JSON.stringify(messages));\n  }, [messages]);\n  const fetchTemplateQuestions = async input => {\n    try {\n      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2;\n      const response = await fetch(GEMINI_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `Generate 5 relevant questions based on: ${input}`\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      const questions = (data === null || data === void 0 ? void 0 : (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : _data$candidates$$con2.map(part => part.text)) || [];\n      setTemplateQuestions(questions);\n    } catch (error) {\n      console.error(\"Error fetching template questions:\", error);\n    }\n  };\n  const handleSendMessage = async function (event) {\n    let inputText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const input = inputText || event.target.value || document.getElementById(\"chat-input\").value;\n    if (!input.trim()) return;\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages([...messages, userMessage]);\n    fetchTemplateQuestions(input);\n    const botResponse = await getBotResponse(input);\n    setMessages(prev => [...prev, {\n      text: botResponse,\n      sender: \"bot\"\n    }]);\n    document.getElementById(\"chat-input\").value = \"\";\n  };\n  const getBotResponse = async input => {\n    try {\n      var _data$candidates2, _data$candidates2$, _data$candidates2$$co, _data$candidates2$$co2, _data$candidates2$$co3;\n      const response = await fetch(GEMINI_API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `${SYSTEM_PROMPT}\\nUser: ${input}\\nAI:`\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      return (data === null || data === void 0 ? void 0 : (_data$candidates2 = data.candidates) === null || _data$candidates2 === void 0 ? void 0 : (_data$candidates2$ = _data$candidates2[0]) === null || _data$candidates2$ === void 0 ? void 0 : (_data$candidates2$$co = _data$candidates2$.content) === null || _data$candidates2$$co === void 0 ? void 0 : (_data$candidates2$$co2 = _data$candidates2$$co.parts) === null || _data$candidates2$$co2 === void 0 ? void 0 : (_data$candidates2$$co3 = _data$candidates2$$co2[0]) === null || _data$candidates2$$co3 === void 0 ? void 0 : _data$candidates2$$co3.text) || \"I'm not sure, but I'm learning!\";\n    } catch (error) {\n      console.error(\"Error fetching response:\", error);\n      return \"Oops! Something went wrong.\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ChatButton, {\n      onClick: () => setVisible(!visible),\n      children: \"\\uD83D\\uDCAC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      visible: visible,\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: () => setVisible(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatBody, {\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: msg.sender === \"user\" ? \"right\" : \"left\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this)), templateQuestions.map((q, index) => /*#__PURE__*/_jsxDEV(TemplateButton, {\n          onClick: () => handleSendMessage(null, q),\n          children: q\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ChatInput, {\n          id: \"chat-input\",\n          type: \"text\",\n          placeholder: \"Type a message...\",\n          onKeyPress: handleSendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SendButton, {\n          onClick: handleSendMessage,\n          children: \"\\u27A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"rlgQkDV5n8eRynY6jfdryK8WHHs=\");\n_c11 = Chatbot;\nexport default Chatbot;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n$RefreshReg$(_c, \"ChatContainer\");\n$RefreshReg$(_c2, \"ChatButton\");\n$RefreshReg$(_c3, \"ChatWindow\");\n$RefreshReg$(_c4, \"ChatHeader\");\n$RefreshReg$(_c5, \"CloseButton\");\n$RefreshReg$(_c6, \"ChatBody\");\n$RefreshReg$(_c7, \"ChatInputContainer\");\n$RefreshReg$(_c8, \"ChatInput\");\n$RefreshReg$(_c9, \"SendButton\");\n$RefreshReg$(_c10, \"TemplateButton\");\n$RefreshReg$(_c11, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","styled","jsxDEV","_jsxDEV","API_KEY","GEMINI_API_URL","SYSTEM_PROMPT","templateQuestions","ChatContainer","div","_c","ChatButton","button","_c2","ChatWindow","props","visible","_c3","ChatHeader","_c4","CloseButton","_c5","ChatBody","_c6","ChatInputContainer","_c7","ChatInput","input","_c8","SendButton","_c9","TemplateButton","_c10","Chatbot","_s","setVisible","messages","setMessages","setTemplateQuestions","storedMessages","JSON","parse","localStorage","getItem","setItem","stringify","fetchTemplateQuestions","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","response","fetch","method","headers","body","contents","parts","text","data","json","questions","candidates","content","map","part","error","console","handleSendMessage","event","inputText","arguments","length","undefined","target","value","document","getElementById","trim","userMessage","sender","botResponse","getBotResponse","prev","_data$candidates2","_data$candidates2$","_data$candidates2$$co","_data$candidates2$$co2","_data$candidates2$$co3","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","msg","index","style","textAlign","q","id","type","placeholder","onKeyPress","_c11","$RefreshReg$"],"sources":["C:/Users/mayan/OneDrive/Desktop/mayank-cse.github.io-main/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst API_KEY = \"AIzaSyA19uCjIjOX3Wsjlan6ZT-R9cBi05esgjw\"; // Replace with your actual API key\r\nconst GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;\r\nconst SYSTEM_PROMPT = `\r\nYou are an AI assistant that provides responses only about Mayank Gupta's career. You must strictly answer questions related to his Education, Work Experience, Technical Skills, Projects, and Career Aspirations.\r\n\r\nIf a user asks about personal details, non-career topics, or unrelated subjects, politely decline by saying: \r\n\"I'm here to answer questions about Mayank Gupta's education, experience, and career aspirations. Let me know how I can help!\"\r\n\r\nHere’s Mayank Gupta’s professional background:\r\n\r\n**Education:**  \r\n- B.Tech in Computer Science and Engineering (2020-2024) from Vellore Institute of Technology, Chennai.  \r\n- Higher Secondary (92.60%) from Ahlcon Public School, New Delhi (2018-2020).  \r\n\r\n**Experience:**  \r\n- **Software Development Engineer (SDE) at John Deere** (June 2024 – Present)  \r\n  - Developed \"DeereVision AI Workspace,\" integrating LLaMA 3.2 and Neo4j & Chroma DB.  \r\n  - Built modular Python solutions with LangChain, Terraform, Docker, and GitHub Actions on AWS.  \r\n\r\n- **SDE Intern at Swiggy** (Sept 2023 – June 2024)  \r\n  - Developed 7 full-fledged payment dashboards using Elasticsearch & Retool.  \r\n\r\n- **SDE Intern at Dewiride Technologies** (July 2022 – Dec 2022)  \r\n  - Worked on 15+ client-specific projects using Python, C#, and Microsoft Bot Framework.  \r\n\r\n- **SDE Intern at LG Electronics** (May 2022 – July 2022)  \r\n  - Built a Lunch Booking Web App used by 1000+ employees with C# and ASP.NET.  \r\n\r\n**Projects:**  \r\n- **DEV – Virtual Banking Assistant** (Finalist, Bank of Baroda Hackathon)  \r\n- **Face Track AI** (Finalist, Tamil Nadu Police Hackathon)  \r\n- **Hunger Free Society** (2nd Prize, IEEE AISYWAL Competition)  \r\n- **Go-To-Market Merchandiser Bot** (Automated Merchandiser Reporting)  \r\n\r\n**Skills:**  \r\n- **Programming:** Python, C++, Java, C#  \r\n- **Frameworks:** Ollama, LangChain, FastAPI, Flask, ASP.NET, Django  \r\n- **Databases:** MySQL, Cosmos DB, Neo4j, ChromaDB, FAISS  \r\n- **Cloud:** AWS, GCP, Azure  \r\n\r\nWhen answering questions, stay concise and professional. If the question is unclear, ask for clarification. If the topic is outside Mayank Gupta’s career scope, politely decline to answer.\r\n`;\r\n\r\n\r\nconst templateQuestions = [\r\n  \"Hi! How can you help me\",\r\n  \"What knowledge do you have about Mayank\"\r\n];\r\n\r\nconst ChatContainer = styled.div`\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst ChatButton = styled.button`\r\n  background: #007bff;\r\n  color: white;\r\n  border: none;\r\n  padding: 12px;\r\n  font-size: 20px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\nconst ChatWindow = styled.div`\r\n  width: 300px;\r\n  height: 400px;\r\n  background: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\r\n  display: ${(props) => (props.visible ? \"flex\" : \"none\")};\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  position: fixed;\r\n  bottom: 80px;\r\n  right: 20px;\r\n`;\r\n\r\nconst ChatHeader = styled.div`\r\n  background: #007bff;\r\n  color: white;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ChatBody = styled.div`\r\n  flex: 1;\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  font-size: 14px;\r\n  background: #f9f9f9;\r\n`;\r\n\r\nconst ChatInputContainer = styled.div`\r\n  display: flex;\r\n  border-top: 1px solid #ddd;\r\n  padding: 5px;\r\n  background: #fff;\r\n`;\r\n\r\nconst ChatInput = styled.input`\r\n  flex: 1;\r\n  padding: 8px;\r\n  border: none;\r\n  outline: none;\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  background: #007bff;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst TemplateButton = styled.button`\r\n  background: #ddd;\r\n  border: none;\r\n  padding: 8px;\r\n  margin: 5px;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst Chatbot = () => {\r\n  const [visible, setVisible] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [templateQuestions, setTemplateQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storedMessages = JSON.parse(localStorage.getItem(\"chatHistory\")) || [];\r\n    setMessages(storedMessages);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"chatHistory\", JSON.stringify(messages));\r\n  }, [messages]);\r\n\r\n  const fetchTemplateQuestions = async (input) => {\r\n    try {\r\n      const response = await fetch(GEMINI_API_URL, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [\r\n            {\r\n              parts: [\r\n                { text: `Generate 5 relevant questions based on: ${input}` },\r\n              ],\r\n            },\r\n          ],\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      const questions = data?.candidates?.[0]?.content?.parts?.map(part => part.text) || [];\r\n      setTemplateQuestions(questions);\r\n    } catch (error) {\r\n      console.error(\"Error fetching template questions:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = async (event, inputText = null) => {\r\n    const input = inputText || event.target.value || document.getElementById(\"chat-input\").value;\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = { text: input, sender: \"user\" };\r\n    setMessages([...messages, userMessage]);\r\n\r\n    fetchTemplateQuestions(input);\r\n\r\n    const botResponse = await getBotResponse(input);\r\n    setMessages((prev) => [...prev, { text: botResponse, sender: \"bot\" }]);\r\n\r\n    document.getElementById(\"chat-input\").value = \"\";\r\n  };\r\n\r\n  const getBotResponse = async (input) => {\r\n    try {\r\n      const response = await fetch(GEMINI_API_URL, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [\r\n            {\r\n              parts: [{ text: `${SYSTEM_PROMPT}\\nUser: ${input}\\nAI:` }],\r\n            },\r\n          ],\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      return data?.candidates?.[0]?.content?.parts?.[0]?.text || \"I'm not sure, but I'm learning!\";\r\n    } catch (error) {\r\n      console.error(\"Error fetching response:\", error);\r\n      return \"Oops! Something went wrong.\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContainer>\r\n      <ChatButton onClick={() => setVisible(!visible)}>💬</ChatButton>\r\n      <ChatWindow visible={visible}>\r\n        <ChatHeader>\r\n          <span>Chatbot</span>\r\n          <CloseButton onClick={() => setVisible(false)}>&times;</CloseButton>\r\n        </ChatHeader>\r\n        <ChatBody>\r\n          {messages.map((msg, index) => (\r\n            <div key={index} style={{ textAlign: msg.sender === \"user\" ? \"right\" : \"left\" }}>\r\n              <p>{msg.text}</p>\r\n            </div>\r\n          ))}\r\n          {templateQuestions.map((q, index) => (\r\n            <TemplateButton key={index} onClick={() => handleSendMessage(null, q)}>\r\n              {q}\r\n            </TemplateButton>\r\n          ))}\r\n        </ChatBody>\r\n        <ChatInputContainer>\r\n          <ChatInput id=\"chat-input\" type=\"text\" placeholder=\"Type a message...\" onKeyPress={handleSendMessage} />\r\n          <SendButton onClick={handleSendMessage}>➤</SendButton>\r\n        </ChatInputContainer>\r\n      </ChatWindow>\r\n    </ChatContainer>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}