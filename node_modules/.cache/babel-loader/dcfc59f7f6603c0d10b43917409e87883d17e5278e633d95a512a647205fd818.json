{"ast":null,"code":"import _objectSpread from \"C:/Users/mayan/source/repos/mayankcse.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\r\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\r\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\r\n * @typedef {import('mdast').Parent} Parent\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('hast').Comment} Comment\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').ElementContent} Content\r\n * @typedef {import('unist-util-position').PositionLike} PositionLike\r\n *\r\n * @typedef EmbeddedHastFields\r\n * @property {string} [hName] Defines the tag name of an element\r\n * @property {Properties} [hProperties] Defines the properties of an element\r\n * @property {Array.<Content>} [hChildren] Defines the (hast) children of an element\r\n *\r\n * @typedef {Object.<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\r\n *\r\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\r\n *\r\n * @callback Handler\r\n * @param {H} h Handle context\r\n * @param {any} node mdast node to handle\r\n * @param {Parent|null} parent Parent of `node`\r\n * @returns {Content|Array.<Content>|null|undefined} hast node\r\n *\r\n * @callback HFunctionProps\r\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\r\n * @param {string} tagName HTML tag name\r\n * @param {Properties} props Properties\r\n * @param {Array.<Content>?} [children] hast content\r\n * @returns {Element}\r\n *\r\n * @callback HFunctionNoProps\r\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\r\n * @param {string} tagName HTML tag name\r\n * @param {Array.<Content>?} [children] hast content\r\n * @returns {Element}\r\n *\r\n * @typedef HFields\r\n * @property {boolean} dangerous Whether HTML is allowed\r\n * @property {(identifier: string) => Definition|null} definition Definition cache\r\n * @property {Object.<string, FootnoteDefinition>} footnoteById Footnote cache\r\n * @property {Array.<string>} footnoteOrder Order in which footnotes occur\r\n * @property {Handlers} handlers Applied handlers\r\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\r\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\r\n * @property {Array.<string>} passThrough List of node types to pass through untouched (except for their children).\r\n *\r\n * @typedef Options\r\n * @property {boolean} [allowDangerousHtml=false] Whether to allow `html` nodes and inject them as `raw` HTML\r\n * @property {Handlers} [handlers] Object mapping mdast nodes to functions handling them\r\n * @property {Array.<string>} [passThrough] List of custom mdast node types to pass through (keep) in hast\r\n * @property {Handler} [unknownHandler] Handler for all unknown nodes.\r\n *\r\n * @typedef {Record.<string, Handler>} Handlers Map of node types to handlers\r\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H Handle context\r\n */\n\nimport { u } from 'unist-builder';\nimport { visit } from 'unist-util-visit';\nimport { pointStart, pointEnd } from 'unist-util-position';\nimport { generated } from 'unist-util-generated';\nimport { definitions } from 'mdast-util-definitions';\nimport { one } from './traverse.js';\nimport { footer } from './footer.js';\nimport { handlers } from './handlers/index.js';\nvar own = {}.hasOwnProperty;\n\n/**\r\n * Factory to transform.\r\n * @param {MdastNode} tree mdast node\r\n * @param {Options} [options] Configuration\r\n * @returns {H} `h` function\r\n */\nfunction factory(tree, options) {\n  var settings = options || {};\n  var dangerous = settings.allowDangerousHtml || false;\n  /** @type {Object.<string, FootnoteDefinition>} */\n  var footnoteById = {};\n  h.dangerous = dangerous;\n  h.definition = definitions(tree);\n  h.footnoteById = footnoteById;\n  /** @type {Array.<string>} */\n  h.footnoteOrder = [];\n  h.augment = augment;\n  h.handlers = _objectSpread(_objectSpread({}, handlers), settings.handlers);\n  h.unknownHandler = settings.unknownHandler;\n  h.passThrough = settings.passThrough;\n  visit(tree, 'footnoteDefinition', function (definition) {\n    var id = String(definition.identifier).toUpperCase();\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition;\n    }\n  });\n\n  // @ts-expect-error Hush, it’s fine!\n  return h;\n\n  /**\r\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\r\n   * @param {(NodeWithData|PositionLike)?} left\r\n   * @param {Content} right\r\n   * @returns {Content}\r\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      var data = left.data;\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          };\n        }\n        right.tagName = data.hName;\n      }\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = _objectSpread(_objectSpread({}, right.properties), data.hProperties);\n      }\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren;\n      }\n    }\n    if (left) {\n      var ctx = 'type' in left ? left : {\n        position: left\n      };\n      if (!generated(ctx)) {\n        right.position = {\n          start: pointStart(ctx),\n          end: pointEnd(ctx)\n        };\n      }\n    }\n    return right;\n  }\n\n  /**\r\n   * Create an element for `node`.\r\n   *\r\n   * @type {HFunctionProps}\r\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props;\n      props = {};\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName: tagName,\n      properties: props || {},\n      children: children || []\n    });\n  }\n}\n\n/**\r\n * Transform `tree` (an mdast node) to a hast node.\r\n *\r\n * @param {MdastNode} tree mdast node\r\n * @param {Options} [options] Configuration\r\n * @returns {HastNode|null|undefined} hast node\r\n */\nexport function toHast(tree, options) {\n  var h = factory(tree, options);\n  var node = one(h, tree, null);\n  var foot = footer(h);\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot);\n  }\n  return Array.isArray(node) ? {\n    type: 'root',\n    children: node\n  } : node;\n}","map":{"version":3,"names":["u","visit","pointStart","pointEnd","generated","definitions","one","footer","handlers","own","hasOwnProperty","factory","tree","options","settings","dangerous","allowDangerousHtml","footnoteById","h","definition","footnoteOrder","augment","_objectSpread","unknownHandler","passThrough","id","String","identifier","toUpperCase","call","left","right","data","hName","type","tagName","properties","children","hProperties","hChildren","ctx","position","start","end","node","props","Array","isArray","toHast","foot","push"],"sources":["C:/Users/mayan/source/repos/mayankcse.github.io/node_modules/mdast-util-to-hast/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\r\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\r\n * @typedef {import('mdast').Parent} Parent\r\n * @typedef {import('mdast').Definition} Definition\r\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\r\n * @typedef {import('hast').Properties} Properties\r\n * @typedef {import('hast').Text} Text\r\n * @typedef {import('hast').Comment} Comment\r\n * @typedef {import('hast').Element} Element\r\n * @typedef {import('hast').Root} Root\r\n * @typedef {import('hast').ElementContent} Content\r\n * @typedef {import('unist-util-position').PositionLike} PositionLike\r\n *\r\n * @typedef EmbeddedHastFields\r\n * @property {string} [hName] Defines the tag name of an element\r\n * @property {Properties} [hProperties] Defines the properties of an element\r\n * @property {Array.<Content>} [hChildren] Defines the (hast) children of an element\r\n *\r\n * @typedef {Object.<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\r\n *\r\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\r\n *\r\n * @callback Handler\r\n * @param {H} h Handle context\r\n * @param {any} node mdast node to handle\r\n * @param {Parent|null} parent Parent of `node`\r\n * @returns {Content|Array.<Content>|null|undefined} hast node\r\n *\r\n * @callback HFunctionProps\r\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\r\n * @param {string} tagName HTML tag name\r\n * @param {Properties} props Properties\r\n * @param {Array.<Content>?} [children] hast content\r\n * @returns {Element}\r\n *\r\n * @callback HFunctionNoProps\r\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\r\n * @param {string} tagName HTML tag name\r\n * @param {Array.<Content>?} [children] hast content\r\n * @returns {Element}\r\n *\r\n * @typedef HFields\r\n * @property {boolean} dangerous Whether HTML is allowed\r\n * @property {(identifier: string) => Definition|null} definition Definition cache\r\n * @property {Object.<string, FootnoteDefinition>} footnoteById Footnote cache\r\n * @property {Array.<string>} footnoteOrder Order in which footnotes occur\r\n * @property {Handlers} handlers Applied handlers\r\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\r\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\r\n * @property {Array.<string>} passThrough List of node types to pass through untouched (except for their children).\r\n *\r\n * @typedef Options\r\n * @property {boolean} [allowDangerousHtml=false] Whether to allow `html` nodes and inject them as `raw` HTML\r\n * @property {Handlers} [handlers] Object mapping mdast nodes to functions handling them\r\n * @property {Array.<string>} [passThrough] List of custom mdast node types to pass through (keep) in hast\r\n * @property {Handler} [unknownHandler] Handler for all unknown nodes.\r\n *\r\n * @typedef {Record.<string, Handler>} Handlers Map of node types to handlers\r\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H Handle context\r\n */\r\n\r\nimport {u} from 'unist-builder'\r\nimport {visit} from 'unist-util-visit'\r\nimport {pointStart, pointEnd} from 'unist-util-position'\r\nimport {generated} from 'unist-util-generated'\r\nimport {definitions} from 'mdast-util-definitions'\r\nimport {one} from './traverse.js'\r\nimport {footer} from './footer.js'\r\nimport {handlers} from './handlers/index.js'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Factory to transform.\r\n * @param {MdastNode} tree mdast node\r\n * @param {Options} [options] Configuration\r\n * @returns {H} `h` function\r\n */\r\nfunction factory(tree, options) {\r\n  const settings = options || {}\r\n  const dangerous = settings.allowDangerousHtml || false\r\n  /** @type {Object.<string, FootnoteDefinition>} */\r\n  const footnoteById = {}\r\n\r\n  h.dangerous = dangerous\r\n  h.definition = definitions(tree)\r\n  h.footnoteById = footnoteById\r\n  /** @type {Array.<string>} */\r\n  h.footnoteOrder = []\r\n  h.augment = augment\r\n  h.handlers = {...handlers, ...settings.handlers}\r\n  h.unknownHandler = settings.unknownHandler\r\n  h.passThrough = settings.passThrough\r\n\r\n  visit(tree, 'footnoteDefinition', (definition) => {\r\n    const id = String(definition.identifier).toUpperCase()\r\n\r\n    // Mimick CM behavior of link definitions.\r\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\r\n    if (!own.call(footnoteById, id)) {\r\n      footnoteById[id] = definition\r\n    }\r\n  })\r\n\r\n  // @ts-expect-error Hush, it’s fine!\r\n  return h\r\n\r\n  /**\r\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\r\n   * @param {(NodeWithData|PositionLike)?} left\r\n   * @param {Content} right\r\n   * @returns {Content}\r\n   */\r\n  function augment(left, right) {\r\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\r\n    if (left && 'data' in left && left.data) {\r\n      /** @type {Data} */\r\n      const data = left.data\r\n\r\n      if (data.hName) {\r\n        if (right.type !== 'element') {\r\n          right = {\r\n            type: 'element',\r\n            tagName: '',\r\n            properties: {},\r\n            children: []\r\n          }\r\n        }\r\n\r\n        right.tagName = data.hName\r\n      }\r\n\r\n      if (right.type === 'element' && data.hProperties) {\r\n        right.properties = {...right.properties, ...data.hProperties}\r\n      }\r\n\r\n      if ('children' in right && right.children && data.hChildren) {\r\n        right.children = data.hChildren\r\n      }\r\n    }\r\n\r\n    if (left) {\r\n      const ctx = 'type' in left ? left : {position: left}\r\n\r\n      if (!generated(ctx)) {\r\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\r\n      }\r\n    }\r\n\r\n    return right\r\n  }\r\n\r\n  /**\r\n   * Create an element for `node`.\r\n   *\r\n   * @type {HFunctionProps}\r\n   */\r\n  function h(node, tagName, props, children) {\r\n    if (Array.isArray(props)) {\r\n      children = props\r\n      props = {}\r\n    }\r\n\r\n    // @ts-expect-error augmenting an element yields an element.\r\n    return augment(node, {\r\n      type: 'element',\r\n      tagName,\r\n      properties: props || {},\r\n      children: children || []\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Transform `tree` (an mdast node) to a hast node.\r\n *\r\n * @param {MdastNode} tree mdast node\r\n * @param {Options} [options] Configuration\r\n * @returns {HastNode|null|undefined} hast node\r\n */\r\nexport function toHast(tree, options) {\r\n  const h = factory(tree, options)\r\n  const node = one(h, tree, null)\r\n  const foot = footer(h)\r\n\r\n  if (foot) {\r\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\r\n    // content.\r\n    // So assume `node` is a parent node.\r\n    node.children.push(u('text', '\\n'), foot)\r\n  }\r\n\r\n  return Array.isArray(node) ? {type: 'root', children: node} : node\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}