{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport var thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  var size = 0;\n  /** @type {NonNullable<Code>} */\n  var marker;\n  return start;\n\n  /**\r\n   * Start of thematic break.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    effects.enter('thematicBreak');\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\r\n   * After optional whitespace, at marker.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence');\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak');\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit('thematicBreakSequence');\n    return markdownSpace(code) ? factorySpace(effects, atBreak, 'whitespace')(code) : atBreak(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownSpace","thematicBreak","name","tokenize","tokenizeThematicBreak","effects","ok","nok","size","marker","start","code","enter","before","atBreak","sequence","exit","consume"],"sources":["C:/mayankcse.github.io/node_modules/micromark-core-commonmark/lib/thematic-break.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {factorySpace} from 'micromark-factory-space'\r\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\r\n/** @type {Construct} */\r\nexport const thematicBreak = {\r\n  name: 'thematicBreak',\r\n  tokenize: tokenizeThematicBreak\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeThematicBreak(effects, ok, nok) {\r\n  let size = 0\r\n  /** @type {NonNullable<Code>} */\r\n  let marker\r\n  return start\r\n\r\n  /**\r\n   * Start of thematic break.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('thematicBreak')\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * After optional whitespace, at marker.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    marker = code\r\n    return atBreak(code)\r\n  }\r\n\r\n  /**\r\n   * After something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (code === marker) {\r\n      effects.enter('thematicBreakSequence')\r\n      return sequence(code)\r\n    }\r\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\r\n      effects.exit('thematicBreak')\r\n      return ok(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In sequence.\r\n   *\r\n   * ```markdown\r\n   * > | ***\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function sequence(code) {\r\n    if (code === marker) {\r\n      effects.consume(code)\r\n      size++\r\n      return sequence\r\n    }\r\n    effects.exit('thematicBreakSequence')\r\n    return markdownSpace(code)\r\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\r\n      : atBreak(code)\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,EAAEC,aAAa,QAAO,0BAA0B;AAC1E;AACA,OAAO,IAAMC,aAAa,GAAG;EAC3BC,IAAI,EAAE,eAAe;EACrBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASA,qBAAqBA,CAACC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAC/C,IAAIC,IAAI,GAAG,CAAC;EACZ;EACA,IAAIC,MAAM;EACV,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBN,OAAO,CAACO,KAAK,CAAC,eAAe,CAAC;IAC9B;IACA,OAAOC,MAAM,CAACF,IAAI,CAAC;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASE,MAAMA,CAACF,IAAI,EAAE;IACpBF,MAAM,GAAGE,IAAI;IACb,OAAOG,OAAO,CAACH,IAAI,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASG,OAAOA,CAACH,IAAI,EAAE;IACrB,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBJ,OAAO,CAACO,KAAK,CAAC,uBAAuB,CAAC;MACtC,OAAOG,QAAQ,CAACJ,IAAI,CAAC;IACvB;IACA,IAAIH,IAAI,IAAI,CAAC,KAAKG,IAAI,KAAK,IAAI,IAAIZ,kBAAkB,CAACY,IAAI,CAAC,CAAC,EAAE;MAC5DN,OAAO,CAACW,IAAI,CAAC,eAAe,CAAC;MAC7B,OAAOV,EAAE,CAACK,IAAI,CAAC;IACjB;IACA,OAAOJ,GAAG,CAACI,IAAI,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASI,QAAQA,CAACJ,IAAI,EAAE;IACtB,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBJ,OAAO,CAACY,OAAO,CAACN,IAAI,CAAC;MACrBH,IAAI,EAAE;MACN,OAAOO,QAAQ;IACjB;IACAV,OAAO,CAACW,IAAI,CAAC,uBAAuB,CAAC;IACrC,OAAOhB,aAAa,CAACW,IAAI,CAAC,GACtBb,YAAY,CAACO,OAAO,EAAES,OAAO,EAAE,YAAY,CAAC,CAACH,IAAI,CAAC,GAClDG,OAAO,CAACH,IAAI,CAAC;EACnB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}