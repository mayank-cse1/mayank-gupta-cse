{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport var htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nvar blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nvar nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  var index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  var self = this;\n  /** @type {number} */\n  var marker;\n  /** @type {boolean} */\n  var closingTag;\n  /** @type {string} */\n  var buffer;\n  /** @type {number} */\n  var index;\n  /** @type {Code} */\n  var markerB;\n  return start;\n\n  /**\r\n   * Start of HTML (flow).\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\r\n   * At `<`, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function before(code) {\n    effects.enter('htmlFlow');\n    effects.enter('htmlFlowData');\n    effects.consume(code);\n    return open;\n  }\n\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *      ^\r\n   * > | <!doctype>\r\n   *      ^\r\n   * > | <!--xxx-->\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *       ^\r\n   * > | <!--xxx-->\r\n   *       ^\r\n   * > | <![CDATA[>&<]]>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `<!-`, inside a comment, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `<![`, inside CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *        ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function cdataOpenInside(code) {\n    var value = 'CDATA[';\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | </x>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <ab>\r\n   *      ^^\r\n   * > | </ab>\r\n   *       ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      var slash = code === 47;\n      var name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After closing slash of a basic tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <div/>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After closing slash of a complete tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <x/>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\r\n   * At an attribute name.\r\n   *\r\n   * At first, this state is used after a complete tag name, after whitespace,\r\n   * where it expects optional attributes or the end of the tag.\r\n   * It is also reused after attributes, when expecting more optional\r\n   * attributes.\r\n   *\r\n   * ```markdown\r\n   * > | <a />\r\n   *        ^\r\n   * > | <a :b>\r\n   *        ^\r\n   * > | <a _b>\r\n   *        ^\r\n   * > | <a b>\r\n   *        ^\r\n   * > | <a >\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | <a :b>\r\n   *         ^\r\n   * > | <a _b>\r\n   *         ^\r\n   * > | <a b>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\r\n   * After attribute name, at an optional initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b>\r\n   *         ^\r\n   * > | <a b=c>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * > | <a b=\"c\">\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *           ^\r\n   * > | <a b='c'>\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the\r\n   * end of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In certain circumstances of a complete tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `>` in a complete tag.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * In continuation of any HTML kind.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData');\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData');\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\r\n   * In continuation, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\r\n   * In continuation, at eol, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return continuationBefore;\n  }\n\n  /**\r\n   * In continuation, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   *   | <x>\r\n   * > | asd\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter('htmlFlowData');\n    return continuation(code);\n  }\n\n  /**\r\n   * In comment continuation, after one `-`, expecting another.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In raw continuation, after `<`, at `/`.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In raw continuation, after `</`, in a raw tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                             ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      var name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In cdata continuation, after `]`, expecting `]>`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *                  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In declaration or instruction continuation, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | <!-->\r\n   *         ^\r\n   * > | <?>\r\n   *       ^\r\n   * > | <!q>\r\n   *        ^\r\n   * > | <!--ab-->\r\n   *             ^\r\n   * > | <![CDATA[>&<]]>\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\r\n   * In closed continuation: everything we get until the eol/eof is part of it.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData');\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\r\n   * Done.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow');\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  var self = this;\n  return start;\n\n  /**\r\n   * At eol, before continuation.\r\n   *\r\n   * ```markdown\r\n   * > | * ```js\r\n   *            ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * A continuation.\r\n   *\r\n   * ```markdown\r\n   *   | * ```js\r\n   * > | b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\r\n   * Before eol, expecting blank line.\r\n   *\r\n   * ```markdown\r\n   * > | <div>\r\n   *          ^\r\n   *   |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    effects.enter('lineEnding');\n    effects.consume(code);\n    effects.exit('lineEnding');\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","map":{"version":3,"names":["asciiAlpha","asciiAlphanumeric","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","htmlBlockNames","htmlRawNames","blankLine","htmlFlow","name","tokenize","tokenizeHtmlFlow","resolveTo","resolveToHtmlFlow","concrete","blankLineBefore","tokenizeBlankLineBefore","partial","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","events","index","length","type","start","splice","effects","ok","nok","self","marker","closingTag","buffer","markerB","code","before","enter","consume","open","declarationOpen","tagCloseStart","interrupt","continuationDeclarationInside","String","fromCharCode","tagName","commentOpenInside","cdataOpenInside","value","charCodeAt","continuation","slash","toLowerCase","includes","basicSelfClosing","parser","lazy","now","line","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","exit","check","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","after","attempt"],"sources":["C:/mayankcse.github.io/node_modules/micromark-core-commonmark/lib/html-flow.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Construct} Construct\r\n * @typedef {import('micromark-util-types').Resolver} Resolver\r\n * @typedef {import('micromark-util-types').State} State\r\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\r\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\r\n */\r\n\r\nimport {\r\n  asciiAlpha,\r\n  asciiAlphanumeric,\r\n  markdownLineEnding,\r\n  markdownLineEndingOrSpace,\r\n  markdownSpace\r\n} from 'micromark-util-character'\r\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\r\nimport {blankLine} from './blank-line.js'\r\n\r\n/** @type {Construct} */\r\nexport const htmlFlow = {\r\n  name: 'htmlFlow',\r\n  tokenize: tokenizeHtmlFlow,\r\n  resolveTo: resolveToHtmlFlow,\r\n  concrete: true\r\n}\r\n\r\n/** @type {Construct} */\r\nconst blankLineBefore = {\r\n  tokenize: tokenizeBlankLineBefore,\r\n  partial: true\r\n}\r\nconst nonLazyContinuationStart = {\r\n  tokenize: tokenizeNonLazyContinuationStart,\r\n  partial: true\r\n}\r\n\r\n/** @type {Resolver} */\r\nfunction resolveToHtmlFlow(events) {\r\n  let index = events.length\r\n  while (index--) {\r\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\r\n      break\r\n    }\r\n  }\r\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\r\n    // Add the prefix start to the HTML token.\r\n    events[index][1].start = events[index - 2][1].start\r\n    // Add the prefix start to the HTML line token.\r\n    events[index + 1][1].start = events[index - 2][1].start\r\n    // Remove the line prefix.\r\n    events.splice(index - 2, 2)\r\n  }\r\n  return events\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeHtmlFlow(effects, ok, nok) {\r\n  const self = this\r\n  /** @type {number} */\r\n  let marker\r\n  /** @type {boolean} */\r\n  let closingTag\r\n  /** @type {string} */\r\n  let buffer\r\n  /** @type {number} */\r\n  let index\r\n  /** @type {Code} */\r\n  let markerB\r\n  return start\r\n\r\n  /**\r\n   * Start of HTML (flow).\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    // To do: parse indent like `markdown-rs`.\r\n    return before(code)\r\n  }\r\n\r\n  /**\r\n   * At `<`, after optional whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function before(code) {\r\n    effects.enter('htmlFlow')\r\n    effects.enter('htmlFlowData')\r\n    effects.consume(code)\r\n    return open\r\n  }\r\n\r\n  /**\r\n   * After `<`, at tag name or other stuff.\r\n   *\r\n   * ```markdown\r\n   * > | <x />\r\n   *      ^\r\n   * > | <!doctype>\r\n   *      ^\r\n   * > | <!--xxx-->\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 33) {\r\n      effects.consume(code)\r\n      return declarationOpen\r\n    }\r\n    if (code === 47) {\r\n      effects.consume(code)\r\n      closingTag = true\r\n      return tagCloseStart\r\n    }\r\n    if (code === 63) {\r\n      effects.consume(code)\r\n      marker = 3\r\n      // To do:\r\n      // tokenizer.concrete = true\r\n      // To do: use `markdown-rs` style interrupt.\r\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\r\n      // right now, so we do need to search for `>`, similar to declarations.\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!`, at declaration, comment, or CDATA.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *       ^\r\n   * > | <!--xxx-->\r\n   *       ^\r\n   * > | <![CDATA[>&<]]>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function declarationOpen(code) {\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      marker = 2\r\n      return commentOpenInside\r\n    }\r\n    if (code === 91) {\r\n      effects.consume(code)\r\n      marker = 5\r\n      index = 0\r\n      return cdataOpenInside\r\n    }\r\n\r\n    // ASCII alphabetical.\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      marker = 4\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<!-`, inside a comment, at another `-`.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function commentOpenInside(code) {\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuationDeclarationInside\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `<![`, inside CDATA, expecting `CDATA[`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *        ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function cdataOpenInside(code) {\r\n    const value = 'CDATA['\r\n    if (code === value.charCodeAt(index++)) {\r\n      effects.consume(code)\r\n      if (index === value.length) {\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok : continuation\r\n      }\r\n      return cdataOpenInside\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `</`, in closing tag, at tag name.\r\n   *\r\n   * ```markdown\r\n   * > | </x>\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagCloseStart(code) {\r\n    if (asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer = String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <ab>\r\n   *      ^^\r\n   * > | </ab>\r\n   *       ^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function tagName(code) {\r\n    if (\r\n      code === null ||\r\n      code === 47 ||\r\n      code === 62 ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      const slash = code === 47\r\n      const name = buffer.toLowerCase()\r\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\r\n        marker = 1\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\r\n        marker = 6\r\n        if (slash) {\r\n          effects.consume(code)\r\n          return basicSelfClosing\r\n        }\r\n\r\n        // // Do not form containers.\r\n        // tokenizer.concrete = true\r\n        return self.interrupt ? ok(code) : continuation(code)\r\n      }\r\n      marker = 7\r\n      // Do not support complete HTML when interrupting.\r\n      return self.interrupt && !self.parser.lazy[self.now().line]\r\n        ? nok(code)\r\n        : closingTag\r\n        ? completeClosingTagAfter(code)\r\n        : completeAttributeNameBefore(code)\r\n    }\r\n\r\n    // ASCII alphanumerical and `-`.\r\n    if (code === 45 || asciiAlphanumeric(code)) {\r\n      effects.consume(code)\r\n      buffer += String.fromCharCode(code)\r\n      return tagName\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a basic tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <div/>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function basicSelfClosing(code) {\r\n    if (code === 62) {\r\n      effects.consume(code)\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return self.interrupt ? ok : continuation\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After closing slash of a complete tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <x/>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeClosingTagAfter(code) {\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeClosingTagAfter\r\n    }\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * At an attribute name.\r\n   *\r\n   * At first, this state is used after a complete tag name, after whitespace,\r\n   * where it expects optional attributes or the end of the tag.\r\n   * It is also reused after attributes, when expecting more optional\r\n   * attributes.\r\n   *\r\n   * ```markdown\r\n   * > | <a />\r\n   *        ^\r\n   * > | <a :b>\r\n   *        ^\r\n   * > | <a _b>\r\n   *        ^\r\n   * > | <a b>\r\n   *        ^\r\n   * > | <a >\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameBefore(code) {\r\n    if (code === 47) {\r\n      effects.consume(code)\r\n      return completeEnd\r\n    }\r\n\r\n    // ASCII alphanumerical and `:` and `_`.\r\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameBefore\r\n    }\r\n    return completeEnd(code)\r\n  }\r\n\r\n  /**\r\n   * In attribute name.\r\n   *\r\n   * ```markdown\r\n   * > | <a :b>\r\n   *         ^\r\n   * > | <a _b>\r\n   *         ^\r\n   * > | <a b>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeName(code) {\r\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\r\n    if (\r\n      code === 45 ||\r\n      code === 46 ||\r\n      code === 58 ||\r\n      code === 95 ||\r\n      asciiAlphanumeric(code)\r\n    ) {\r\n      effects.consume(code)\r\n      return completeAttributeName\r\n    }\r\n    return completeAttributeNameAfter(code)\r\n  }\r\n\r\n  /**\r\n   * After attribute name, at an optional initializer, the end of the tag, or\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b>\r\n   *         ^\r\n   * > | <a b=c>\r\n   *         ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeNameAfter(code) {\r\n    if (code === 61) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeNameAfter\r\n    }\r\n    return completeAttributeNameBefore(code)\r\n  }\r\n\r\n  /**\r\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\r\n   * whitespace.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * > | <a b=\"c\">\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueBefore(code) {\r\n    if (\r\n      code === null ||\r\n      code === 60 ||\r\n      code === 61 ||\r\n      code === 62 ||\r\n      code === 96\r\n    ) {\r\n      return nok(code)\r\n    }\r\n    if (code === 34 || code === 39) {\r\n      effects.consume(code)\r\n      markerB = code\r\n      return completeAttributeValueQuoted\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAttributeValueBefore\r\n    }\r\n    return completeAttributeValueUnquoted(code)\r\n  }\r\n\r\n  /**\r\n   * In double or single quoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *           ^\r\n   * > | <a b='c'>\r\n   *           ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuoted(code) {\r\n    if (code === markerB) {\r\n      effects.consume(code)\r\n      markerB = null\r\n      return completeAttributeValueQuotedAfter\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return nok(code)\r\n    }\r\n    effects.consume(code)\r\n    return completeAttributeValueQuoted\r\n  }\r\n\r\n  /**\r\n   * In unquoted attribute value.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=c>\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueUnquoted(code) {\r\n    if (\r\n      code === null ||\r\n      code === 34 ||\r\n      code === 39 ||\r\n      code === 47 ||\r\n      code === 60 ||\r\n      code === 61 ||\r\n      code === 62 ||\r\n      code === 96 ||\r\n      markdownLineEndingOrSpace(code)\r\n    ) {\r\n      return completeAttributeNameAfter(code)\r\n    }\r\n    effects.consume(code)\r\n    return completeAttributeValueUnquoted\r\n  }\r\n\r\n  /**\r\n   * After double or single quoted attribute value, before whitespace or the\r\n   * end of the tag.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAttributeValueQuotedAfter(code) {\r\n    if (code === 47 || code === 62 || markdownSpace(code)) {\r\n      return completeAttributeNameBefore(code)\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In certain circumstances of a complete tag where only an `>` is allowed.\r\n   *\r\n   * ```markdown\r\n   * > | <a b=\"c\">\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeEnd(code) {\r\n    if (code === 62) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * After `>` in a complete tag.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function completeAfter(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      // // Do not form containers.\r\n      // tokenizer.concrete = true\r\n      return continuation(code)\r\n    }\r\n    if (markdownSpace(code)) {\r\n      effects.consume(code)\r\n      return completeAfter\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation of any HTML kind.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *          ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuation(code) {\r\n    if (code === 45 && marker === 2) {\r\n      effects.consume(code)\r\n      return continuationCommentInside\r\n    }\r\n    if (code === 60 && marker === 1) {\r\n      effects.consume(code)\r\n      return continuationRawTagOpen\r\n    }\r\n    if (code === 62 && marker === 4) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n    if (code === 63 && marker === 3) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n    if (code === 93 && marker === 5) {\r\n      effects.consume(code)\r\n      return continuationCdataInside\r\n    }\r\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\r\n      effects.exit('htmlFlowData')\r\n      return effects.check(\r\n        blankLineBefore,\r\n        continuationAfter,\r\n        continuationStart\r\n      )(code)\r\n    }\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('htmlFlowData')\r\n      return continuationStart(code)\r\n    }\r\n    effects.consume(code)\r\n    return continuation\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStart(code) {\r\n    return effects.check(\r\n      nonLazyContinuationStart,\r\n      continuationStartNonLazy,\r\n      continuationAfter\r\n    )(code)\r\n  }\r\n\r\n  /**\r\n   * In continuation, at eol, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   * > | <x>\r\n   *        ^\r\n   *   | asd\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationStartNonLazy(code) {\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return continuationBefore\r\n  }\r\n\r\n  /**\r\n   * In continuation, before non-lazy content.\r\n   *\r\n   * ```markdown\r\n   *   | <x>\r\n   * > | asd\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationBefore(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      return continuationStart(code)\r\n    }\r\n    effects.enter('htmlFlowData')\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In comment continuation, after one `-`, expecting another.\r\n   *\r\n   * ```markdown\r\n   * > | <!--xxx-->\r\n   *             ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCommentInside(code) {\r\n    if (code === 45) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `<`, at `/`.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                            ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawTagOpen(code) {\r\n    if (code === 47) {\r\n      effects.consume(code)\r\n      buffer = ''\r\n      return continuationRawEndTag\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In raw continuation, after `</`, in a raw tag name.\r\n   *\r\n   * ```markdown\r\n   * > | <script>console.log(1)</script>\r\n   *                             ^^^^^^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationRawEndTag(code) {\r\n    if (code === 62) {\r\n      const name = buffer.toLowerCase()\r\n      if (htmlRawNames.includes(name)) {\r\n        effects.consume(code)\r\n        return continuationClose\r\n      }\r\n      return continuation(code)\r\n    }\r\n    if (asciiAlpha(code) && buffer.length < 8) {\r\n      effects.consume(code)\r\n      // @ts-expect-error: not null.\r\n      buffer += String.fromCharCode(code)\r\n      return continuationRawEndTag\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In cdata continuation, after `]`, expecting `]>`.\r\n   *\r\n   * ```markdown\r\n   * > | <![CDATA[>&<]]>\r\n   *                  ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationCdataInside(code) {\r\n    if (code === 93) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In declaration or instruction continuation, at `>`.\r\n   *\r\n   * ```markdown\r\n   * > | <!-->\r\n   *         ^\r\n   * > | <?>\r\n   *       ^\r\n   * > | <!q>\r\n   *        ^\r\n   * > | <!--ab-->\r\n   *             ^\r\n   * > | <![CDATA[>&<]]>\r\n   *                   ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationDeclarationInside(code) {\r\n    if (code === 62) {\r\n      effects.consume(code)\r\n      return continuationClose\r\n    }\r\n\r\n    // More dashes.\r\n    if (code === 45 && marker === 2) {\r\n      effects.consume(code)\r\n      return continuationDeclarationInside\r\n    }\r\n    return continuation(code)\r\n  }\r\n\r\n  /**\r\n   * In closed continuation: everything we get until the eol/eof is part of it.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationClose(code) {\r\n    if (code === null || markdownLineEnding(code)) {\r\n      effects.exit('htmlFlowData')\r\n      return continuationAfter(code)\r\n    }\r\n    effects.consume(code)\r\n    return continuationClose\r\n  }\r\n\r\n  /**\r\n   * Done.\r\n   *\r\n   * ```markdown\r\n   * > | <!doctype>\r\n   *               ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function continuationAfter(code) {\r\n    effects.exit('htmlFlow')\r\n    // // Feel free to interrupt.\r\n    // tokenizer.interrupt = false\r\n    // // No longer concrete.\r\n    // tokenizer.concrete = false\r\n    return ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\r\n  const self = this\r\n  return start\r\n\r\n  /**\r\n   * At eol, before continuation.\r\n   *\r\n   * ```markdown\r\n   * > | * ```js\r\n   *            ^\r\n   *   | b\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return after\r\n    }\r\n    return nok(code)\r\n  }\r\n\r\n  /**\r\n   * A continuation.\r\n   *\r\n   * ```markdown\r\n   *   | * ```js\r\n   * > | b\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\r\n  }\r\n}\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\r\n  return start\r\n\r\n  /**\r\n   * Before eol, expecting blank line.\r\n   *\r\n   * ```markdown\r\n   * > | <div>\r\n   *          ^\r\n   *   |\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter('lineEnding')\r\n    effects.consume(code)\r\n    effects.exit('lineEnding')\r\n    return effects.attempt(blankLine, ok, nok)\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}